{"version":3,"sources":["../../../../src/DAI.js","../../../../src/main.js"],"names":["feature","inProgress","streamManager","currentAd","snapForwardTime","onAdEvent","bind","_this","transforms","getProperty","player","evaluateBindings","Promise","temporalType","metadata","media","getSourceByType","config","source","akamai","adTagParameters","assetKey","resolve","attemptPreroll","TIMED_METADATA","event","cue","onTimedMetadata","TXXX","value","data","videoId","contentSourceId","onStreamEvent","removeEventListener","ima","dai","api","StreamEvent","Type","LOADED","google","ERROR","src","getStreamData","logger","log","addEventListener","this","StreamManager","container","mediaElement","setClickElement","ui","ads","events","hasOwnProperty","adBreakStart","AD_BREAK_ENDED","adBreakEnd","STARTED","adStarted","COMPLETE","adEnded","AD_PROGRESS","adProgress","CLICK","adClick","FIRST_QUARTILE","adFirstQuartile","MIDPOINT","adMidpoint","THIRD_QUARTILE","adThirdQuartile","CUEPOINTS_CHANGED","cuePointsChanged","BREAK_START","ad","getAd","companionAds","getCompanionAds","adPodInfo","getAdPodInfo","adPosition","getAdPosition","adPodIndex","adType","amp","AdVO","getAdId","getDuration","getTotalAds","companions","DURATION_CHANGE","dispatch","AdEvents","BREAK_END","currentTime","adProgressData","duration","paused","cuepoints","forEach","cues","startTime","_this3","contentTimeForStreamTime","start","push","error","previousCuePointForStreamTime","played","previousCuePoint","AdPlugin","DAI"],"mappings":"+OAISA,cAAL,OACKC,UAAL,OACKC,gBAAgB,OAChBC,gBAAL,OAEKC,UAAAA,EAAkBC,UAAvBC,KAAAC,gVAMOC,KAALD,GAAAC,uNAwBSC,GAAKC,EAAOC,oCAXJ,QAARC,EAAQC,+LAMXC,EAAAA,OAAYC,IAAMD,MAAPE,gBAAmBD,EAAA,4BACrB,MAATE,EAAcP,MAAOC,GAAAA,6BACvBO,EAASC,OAAAR,iBAAiBK,GAAgBD,MAAOA,oGAUvCK,OAAAA,EAAkBX,SAAY,+BAKpCY,EAAWZ,MAAAA,GAAYM,KAE7BM,SACSC,mDAGKC,iBAAiBd,OAAAA,IAAAA,OAAYe,eAAZ,SAA/BC,oBAEAvB,eAAAwB,KACMA,cAAJC,iBAAAC,KAAAF,EAAAG,MAAAC,iBADFC,GAAAtB,EAAA,WATFuB,EAgBKvB,EAAA,uBAEGuB,EAAkBvB,MAAAA,GAAYM,KAE/BiB,gBACIV,iGAOPW,cAAgBC,qBAACT,OAAUU,IAAAC,IAAAC,IAAAC,YAAAC,KAAAC,OAAAC,OAAAN,IAAAC,IAAAC,IAAAC,YAAAC,KAAAG,OAAAT,GAAA,GAExB/B,EAAAA,wDAOEuC,IAAON,EAAQE,gBAAgBE,MAE5BI,OAAMlB,IAAMmB,sCAAlB7B,EAAA4B,uBAEKE,IAAOC,IAAZT,IAAAC,YAAAC,KAAAG,uEAbNxC,cAAA6C,kBAAAN,OAAAN,IAAAC,IAAAC,IAAAC,YAAAC,KAAAC,OAAAC,OAAAN,IAAAC,IAAAC,IAAAC,YAAAC,KAAAG,OAAAT,GAAA,6YA6CG/B,OAAAA,IAAgB8C,KAAIP,OAAON,GAAIC,KAAQa,KAAAA,OAAAA,GAAcC,WAAYC,KAAAA,cAAtEC,gBAAAJ,KAAAtC,OAAA2C,GAAAC,IAAAJ,qEAMMK,OAASpB,IAAfC,IAAAC,IAAAC,YAAAC,KAAAiB,eAAA/B,MACSA,KAATgB,OAAkBA,IAAON,IAAIC,IAAIC,YAAIC,KAAYC,kOAa5CM,QAAOC,IAAZV,IAAAC,IAAAC,YAAAC,KAAwCd,sBAChCA,aAARA,qBAESgC,IAAAA,IAAahC,IAAAA,YAAlBc,KAAAmB,oDAGKC,IAAAA,IAAWlC,IAAhBa,YAAAC,KAAAqB,4CAGKC,IAALzB,IAAeX,IAAfa,YAAAC,KAAAuB,2CAGKC,IAAQtC,IAAbY,IAAAC,YAAAC,KAAAyB,iDAGKC,IAAAA,IAAWxC,IAAhBa,YAAAC,KAAA2B,wCAGKC,IAAQ1C,IAAbY,IAAAC,YAAAC,KAAA6B,yDAGKC,IAAAA,IAAAA,IAAgB5C,YAArBc,KAAA+B,8CAGKC,IAAAA,IAAW9C,IAAhBa,YAAAC,KAAAiC,yDAGKC,IAAAA,IAAAA,IAAgBhD,YAArBc,KAAAmC,6DAGKC,IAAAA,IAAAA,IAAiBlD,YAAtBc,KAAAG,oHAQckC,6FAMdC,GAAK5E,EAAAA,8BAGH4E,EAAWC,EAAAA,eACXC,EAAAA,EAAkBC,gBAClBC,EAAYJ,EAAGK,cACfC,EAAuBC,GAAvBD,EAAuBC,UAA7BC,IAAA,EAAA,WAAA,eAEMC,UAAUD,GAAAA,QAADE,IAAoBC,KAAAX,EAApBY,UAAkCJ,EAAAA,WAAoBR,EAAAa,cAArEP,EAAAG,EAAA,UAAA,KAAAP,EAAA,KAAAF,EAAAI,EAAAU,sCAEKxF,SAALgB,OAAqBA,IAAAA,SAAWqE,OAAQC,KAAHtF,gBAChCyF,SAAAA,OAAab,IAAAA,SAAlBc,gBAAA7C,KAAA7C,gBACK2F,SAAS3E,OAAOoE,IAAIQ,SAASvD,QAAQQ,KAAK7C,ifAqBtCsB,SAAOuE,gBACX/F,iBAAL+C,KAAA5C,gBAAA4C,KAAAtC,OAAAyC,aAAA8C,mBACKH,OAAS3E,aAAW4E,YAASC,KAAlC5F,qBACIA,gBAAA,uFAMY6F,YACVC,EAAAA,EAAuBtD,cAEvBuD,SAAAA,OAAWD,IAAAA,SAAeC,YAAhCF,qJAOKH,SAAKpF,OAAO0F,IACfL,SAAKrF,QAALsC,KAAA7C,4LAUEyC,gBAAAyD,UAAAC,QAAA,SAAA5E,KACI6E,MAANC,UAAAC,EAAAvG,cAAAwG,yBAAAhF,EAAAiF,aAEOC,SAAM5D,KAAAtC,OAAa6F,KAAKrG,SAD/B2G,sFAQKpF,KAAAA,cAAOqF,8BAAAb,EACRA,KAAmBvF,EAALqG,cACdC,gBAAmBf,OACrBe,OAAAA,aAAqBA,YAAAA,EAAyBL,0CAvQrBxF,IAAOoE,IAAI0B,eAAAA,SAAAA,OAAAA,IAAAA,OAAAA,cAAAA,ICE5C9F,EAAOoE,IAAP2B","file":"akamai/amp/imadai/Imadai.min.js","sourcesContent":["export default class DAI extends akamai.amp.AdPlugin {\n  constructor(player, config) {\n    super(player, config)\n\n    this.feature = \"ads\"\n    this.inProgress = false\n    this.streamManager = null\n    this.currentAd = null\n    this.adTimeRemaining = null\n    this.snapForwardTime = null\n\n    this.onAdEvent = this.onAdEvent.bind(this)\n\n    // setup transforms\n    if (config.transform !== false) {\n      this.transforms = {\n        [akamai.amp.TransformType.MEDIA]: {transform: this.mediaTransform.bind(this), priority: 1},\n        [akamai.amp.TransformType.TIME]: this.timeTransform.bind(this),\n        [akamai.amp.TransformType.SEEK]: this.seekTransform.bind(this)\n      }\n\n      for (let key in this.transforms) {\n        this.player.addTransform(key, this.transforms[key])\n      }\n    }\n  }\n\n  mediaTransform(media) {\n    return new Promise((resolve, reject) => {\n      // choose the correct request object\n      const isLive = (media.temporalType == \"live\")\n      const streamRequest = (isLive) ? new google.ima.dai.api.LiveStreamRequest() : new google.ima.dai.api.VODStreamRequest()\n\n      // the DAI params can come in from a number of sources\n      const metadata = (media.metadata) ? media.metadata.media || media.metadata : {}\n      const config = this.player.evaluateBindings(this.config, {media})\n      let source = akamai.amp.Utils.getSourceByType(media, \"application/x-mpegURL\")\n      if (source == null)\n        return reject(\"Could not find media\")\n      source = this.player.evaluateBindings(source, {media})\n\n      function getProperty(name, dflt) {\n        return source[name] || metadata[name] || config[name] || dflt\n      }\n\n      // init the stream request\n      streamRequest.adTagParameters = getProperty(\"adTagParameters\")\n      streamRequest.streamActivityMonitorId = getProperty(\"streamActivityMonitorId\")\n      streamRequest.apiKey = getProperty(\"apiKey\", \"\")\n\n      if (isLive) {\n        const assetKey = getProperty(\"assetKey\")\n\n        if (!assetKey)\n          return resolve(media)\n\n        streamRequest.assetKey = assetKey\n        streamRequest.attemptPreroll = getProperty(\"attemptPreroll\", true)\n\n        this.player.addEventListener(akamai.amp.Events.TIMED_METADATA, (event) => {\n          let cue = event.detail\n          if (this.streamManager && cue) {\n            this.streamManager.onTimedMetadata({\"TXXX\": cue.value.data})\n          }\n        })\n      }\n      else {\n        const videoId = getProperty(\"videoId\")\n        const contentSourceId = getProperty(\"contentSourceId\")\n\n        if (!contentSourceId)\n          return resolve(media)\n\n        streamRequest.contentSourceId = contentSourceId\n        streamRequest.videoId = videoId\n      }\n\n      // listen for stream request events\n      let onStreamEvent = (event) => {\n        this.logger.log(`[AMP IMA DAI] Stream Event: ${event.type}`, event)\n        this.streamManager.removeEventListener(\n          [google.ima.dai.api.StreamEvent.Type.LOADED,\n           google.ima.dai.api.StreamEvent.Type.ERROR],\n          onStreamEvent,\n          false)\n\n        switch (event.type) {\n          case google.ima.dai.api.StreamEvent.Type.LOADED:\n            // override the media's src property with the url provided by DAI\n            media.src = event.getStreamData().url\n            //this.player.timeline = new Timeline(this.streamManager, this.player.mediaElement)\n            this.logger.log(`[AMP IMA DAI] Media Source Fetched ${media.src}`)\n            break\n          case google.ima.dai.api.StreamEvent.Type.ERROR:\n            this.logger.log(\"[AMP IMA DAI] Media Source Fetch Error\", event)\n            break\n        }\n        resolve(media)\n      }\n\n      this.streamManager.addEventListener(\n        [google.ima.dai.api.StreamEvent.Type.LOADED,\n         google.ima.dai.api.StreamEvent.Type.ERROR],\n        onStreamEvent,\n        false)\n\n      // make the stream request\n      this.streamManager.requestStream(streamRequest)\n    })\n  }\n\n  timeTransform(time) {\n    return this.streamManager.contentTimeForStreamTime(time)\n  }\n\n  seekTransform(time) {\n    return this.streamManager.streamTimeForContentTime(time)\n  }\n\n  onready() {\n    this.logger.log(\"[AMP IMA DAI] SDK initialize\")\n\n    // create the stream manager\n    this.streamManager = new google.ima.dai.api.StreamManager(this.player.mediaElement)\n\n    if (this.player.ui && this.player.ui.ads && this.player.ui.container)\n      this.streamManager.setClickElement(this.player.ui.ads.container)\n\n    // listen for all available events\n    const events = []\n    for (let event in google.ima.dai.api.StreamEvent.Type) {\n      if (google.ima.dai.api.StreamEvent.Type.hasOwnProperty(event)) {\n        events.push(google.ima.dai.api.StreamEvent.Type[event])\n      }\n    }\n    this.streamManager.addEventListener(events, this.onAdEvent, false)\n  }\n\n  onmediachange() {\n    this.inProgress = false\n  }\n\n  onAdEvent(event) {\n    this.logger.log(`[AMP IMA DAI] Event: ${event.type}`, event)\n    switch (event.type) {\n      case google.ima.dai.api.StreamEvent.Type.AD_BREAK_STARTED:\n        this.adBreakStart(event)\n        break\n      case google.ima.dai.api.StreamEvent.Type.AD_BREAK_ENDED:\n        this.adBreakEnd(event)\n        break\n      case google.ima.dai.api.StreamEvent.Type.STARTED:\n        this.adStarted(event)\n        break\n      case google.ima.dai.api.StreamEvent.Type.COMPLETE:\n        this.adEnded(event)\n        break\n      case google.ima.dai.api.StreamEvent.Type.AD_PROGRESS:\n        this.adProgress(event)\n        break\n      case google.ima.dai.api.StreamEvent.Type.CLICK:\n        this.adClick(event)\n        break\n      case google.ima.dai.api.StreamEvent.Type.FIRST_QUARTILE:\n        this.adFirstQuartile(event)\n        break\n      case google.ima.dai.api.StreamEvent.Type.MIDPOINT:\n        this.adMidpoint(event)\n        break\n      case google.ima.dai.api.StreamEvent.Type.THIRD_QUARTILE:\n        this.adThirdQuartile(event)\n        break\n      case google.ima.dai.api.StreamEvent.Type.CUEPOINTS_CHANGED:\n        this.cuePointsChanged(event)\n        break\n      case google.ima.dai.api.StreamEvent.Type.ERROR:\n        this.adError(event)\n        break\n    }\n  }\n\n  adBreakStart(event) {\n    this.inProgress = true\n    this.dispatch(akamai.amp.AdEvents.BREAK_START)\n  }\n\n  adStarted(event) {\n    if (this.inProgress == false)\n      this.adBreakStart()\n\n    const ad = event.getAd()\n    const companionAds = ad.getCompanionAds()\n    const adPodInfo = ad.getAdPodInfo()\n    const adPosition = adPodInfo.getAdPosition()\n    const adPodIndex = adPodInfo.getPodIndex()\n    const adType = (adPodIndex == 0) ? \"preroll\" : ((adPodIndex == -1) ? \"postroll\" : \"midroll\")\n\n    this.currentAd = new akamai.amp.AdVO(ad.getAdId(), ad.getTitle(), ad.getDuration(), adPosition, adType, \"ima-dai\", null, companionAds, null, ad, adPodInfo.getTotalAds())\n    this.companions = companionAds\n    this.dispatch(akamai.amp.AdEvents.LOADED, this.currentAd)\n    this.dispatch(akamai.amp.AdEvents.DURATION_CHANGE, this.currentAd)\n    this.dispatch(akamai.amp.AdEvents.STARTED, this.currentAd)\n  }\n\n  adFirstQuartile(event) {\n    this.dispatch(akamai.amp.AdEvents.FIRST_QUARTILE, this.currentAd)\n  }\n\n  adMidpoint(event) {\n    this.dispatch(akamai.amp.AdEvents.MIDPOINT, this.currentAd)\n  }\n\n  adThirdQuartile(event) {\n    this.dispatch(akamai.amp.AdEvents.THIRD_QUARTILE, this.currentAd)\n  }\n\n  adEnded(event) {\n    this.dispatch(akamai.amp.AdEvents.ENDED, this.currentAd)\n  }\n\n  adBreakEnd(event) {\n    this.inProgress = false\n    this.dispatch(akamai.amp.AdEvents.BREAK_END)\n    if (this.snapForwardTime && this.snapForwardTime > this.player.mediaElement.currentTime) {\n      this.player.mediaElement.currentTime = this.snapForwardTime\n      this.snapForwardTime = null\n    }\n  }\n\n  adProgress(event) {\n    const adProgressData = event.getStreamData().adProgressData\n    const currentTime = adProgressData.currentTime\n    const duration = adProgressData.duration\n\n    this.dispatch(akamai.amp.AdEvents.TIME_UPDATE, currentTime)\n    this.dispatch(akamai.amp.AdEvents.TIME_REMAINING, Math.floor(duration - currentTime))\n  }\n\n  adClick(event) {\n    if (!this.player.paused)\n      this.player.pause()\n\n    this.dispatch(akamai.amp.AdEvents.CLICKED, this.currentAd)\n  }\n\n  adError(event) {\n    this.dispatch(akamai.amp.AdEvents.ERROR, event.getStreamData().errorMessage)\n  }\n\n  cuePointsChanged(event) {\n    try {\n      const cues = []\n      event.getStreamData().cuepoints.forEach((cue) => {\n        cues.push({\"startTime\": this.streamManager.contentTimeForStreamTime(cue.start)})\n      })\n      if (cues.length)\n        this.player.cues = cues\n    } catch (error) {}\n  }\n\n  onseeked(event) {\n    const currentTime = this.player.mediaElement.currentTime\n    const previousCuePoint = this.streamManager.previousCuePointForStreamTime(currentTime)\n    if (previousCuePoint && !previousCuePoint.played) {\n      this.snapForwardTime = currentTime\n      this.player.mediaElement.currentTime = previousCuePoint.start\n    }\n  }\n}\n","import DAI from \"./DAI\"\n\nakamai.amp.AMP.registerPlugin(\"imadai\", akamai.amp.Plugin.createFactory(DAI))\n\nexport {DAI}\n"]}