{"version":3,"sources":["../../../../src/AISEvents.js","../../../../src/Chooser.js","../../../../src/AIS.js","../../../../src/main.js"],"names":["AUTHENTICATED","Chooser","plugin","response","chooser","create","akamai","title","grid","menu","label","select","event","login","options","selectedIndex","value","onclick","idpId","idps","possible_idps","groups","grouped_idps","logos","base","group","name","featuredGroup","members","forEach","member","idp","bind","key","img","src","div","footprints","feature","setLogging","_this","debug","client","setPlatformId","ais_client","config","platformId","useCache","player","security","busy","then","_this2","authenticate","log","logger","authorize","media","authorization","_key","Promise","resolve","reject","assignhandler","type","resp","apply","_this3","args","error","request","_this4","dispatch","AISEvents","CHOOSE_PROVIDER","duration","this","preview","_this5","init","authenticated","Object","keys","assign","href","AUTHENTICATION_FAILED","fail","resourceId","viewerId","resourceAccess","query","token","security_token","auth","AUTHORIZATION_FAILED","_this6","returnObj","index","obj","valueName","sort","sortType","b","toLowerCase","toLowercase","valueB","valueA","data","method","responseTargets","loc","window","top","location","devToken","test","replace","getTarget","domain","idp_platform_id","display","window_display","target","logoutFormat","format","setRedirect","width","height","amp","Plugin","AIS"],"mappings":"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","file":"akamai/amp/ais/Ais.min.js","sourcesContent":["export default {\n  CHOOSE_PROVIDER: \"chooseprovider\",\n  AUTHENTICATED: \"authenticated\",\n  AUTHENTICATION_FAILED: \"authenticationfailed\",\n  AUTHORIZED: \"authorized\",\n  AUTHORIZATION_FAILED: \"authorizationfailed\"\n}\n","export default class Chooser  {\n\n  constructor(plugin, response) {\n    const create = akamai.amp.Utils.createElement\n    const chooser = create(\"amp-ais-chooser\", chooser)\n    const title = create(\"amp-ais-chooser-title\", chooser, \"Choose your provider\")\n    const grid = create(\"amp-ais-chooser-grid\", chooser)\n    const menu = create(\"amp-ais-chooser-menu\", chooser)\n    const label = create(\"amp-ais-chooser-label\", menu, \"Providers: \")\n    const select = create(\"amp-ais-chooser-select\", menu, null, \"select\")\n    const login = create(\"amp-ais-chooser-login\", menu, \"Login\", \"button\")\n    login.onclick = (event) => {\n      const idpId = select.options[select.selectedIndex].value\n      plugin.login(idpId)\n    }\n\n    // create thumbnail grid\n    const idps = response.possible_idps\n    const groups = response.grouped_idps\n    const logos = plugin.config.logos || {}\n    const base = logos.base || \"\"\n\n    if (groups != null && logos.group != null) {\n      const featuredGroup = groups.filter((group) => group.name === logos.group)[0]\n      if (featuredGroup != null) {\n        featuredGroup.members.forEach((member) => {\n          const idp = idps[member]\n          const div = create(\"amp-ais-chooser-grid-item\", grid)\n          div.onclick = plugin.login.bind(plugin, member)\n\n          if (idps[member].logos && idps[member].logos[logos.key]) {\n            const img = create(\"amp-ais-chooser-grid-cell-img\", div, null, \"img\")\n            const src = idp.logos[logos.key]\n            img.src = (src.indexOf(\"http\") === -1) ? base + src : src\n            img.alt = idp.display_name\n          }\n\n          const span = create(\"amp-ais-chooser-grid-cell-label\", div, idp.display_name, \"span\")\n        })\n      }\n    }\n\n    if (grid.innerHTML) {\n      chooser.classList.add(\"amp-ais-chooser-featured\")\n      label.textContent = \"Other \"\n    }\n\n    // populate select menu\n    const options = select.options\n    const footprints = response.footprints || []\n\n    footprints.forEach((key) => {\n      select.add(new Option(`${idps[key].display_name}`, key))\n    })\n\n    for (let key in idps) {\n      select.add(new Option(`${idps[key].display_name}`, key))\n    }\n\n    // add the chooser to the player's UI\n    plugin.player.container.appendChild(chooser)\n  }\n\n}\n","import AISEvents from \"./AISEvents\"\nimport Chooser from \"./Chooser\"\n\nexport default class AIS extends akamai.amp.Plugin {\n\n  constructor(player, config) {\n    super(player, config)\n\n    this.feature = \"auth\"\n    this.client = window.ais_client\n    this.client.setLogging(this.debug) // Enable AIS logging, log to console.log\n    this.client.setPlatformId(this.config.platformId)  // Set AIS platform_id\n    this.client.setUseCache(this.config.useCache === true)\n\n    // setup media transform\n    if (this.config.transform !== false) {\n      this.player.addTransform(akamai.amp.TransformType.MEDIA, {transform: this.mediaTransform.bind(this), priority: 1})\n    }\n  }\n\n  mediaTransform(media) {\n    const status = media.status\n    if (this.player.security.authorized === true)\n      return media\n\n    this.player.busy = true\n\n    return this.authenticate()\n      .then(() => {\n        this.logger.log(\"[AMP AIS] Authenticated\")\n        return this.authorize()\n      })\n      .then((authorization) => {\n        this.logger.log(\"[AMP AIS] Authorized\")\n        media.authorization = authorization\n        this.player.busy = false\n        return media\n      })\n  }\n\n  request(type, event = type, ...args) {\n    return new Promise((resolve, reject) => {\n      try {\n        this.client.assignhandler(event, (type, resp) => {\n          resolve(resp)\n        })\n        this.client[type].apply(this.client, args)\n      }\n      catch (error) {\n        reject(error)\n      }\n    })\n  }\n\n  bounce() {\n    return this.request(\"bounce\")\n  }\n\n  init() {\n    return this.request(\"init\")\n  }\n\n  chooser() {\n    return this.request(\"chooser\")\n      .then((response) => {\n        this.idps = response.possible_idps = this.sort(response.possible_idps, \"value\", \"display_name\")\n        this.player.busy = false\n        return new Promise((resolve, reject) => {\n          this.chooser = new Chooser(this, response)\n          this.dispatch(AISEvents.CHOOSE_PROVIDER, response)\n        })\n      })\n  }\n\n  identity() {\n    return this.request(\"identity\")\n  }\n\n  resourceAccess(resourceId) {\n    return this.request(\"resourceAccess\", \"authz_query\", resourceId)\n  }\n\n  canPreview() {\n    const preview = this.data.preview\n    return (preview && typeof preview.duration == \"number\")\n  }\n\n  preview() {\n    return Promise.reject()\n  }\n\n  fail() {\n    if (this.canPreview()) {\n      return this.preview()\n    }\n    else {\n      return this.chooser()\n    }\n  }\n\n  authenticate() {\n    return this.bounce()\n      .then((response) => {\n        if (response.authenticated === true) {\n          return this.init()\n            .then((response) => {\n              const key = Object.keys(response.idps)[0]\n              this.idps = Object.assign({key}, response.idps[key])\n              if (this.config.logos && this.idps.logos) {\n                this.idps.logo = this.config.logos.base + this.idps.logos[this.config.logos.key]\n              }\n\n              // logout can be triggered by the server, so add the\n              // listener here instead of waiting for the logout API call\n              this.client.assignhandler('logout_result', () => {\n                // Reload experience to restart workflow, could be returned in AuthZ\n                top.location.href = top.location.href\n              })\n\n              this.dispatch(AISEvents.AUTHENTICATED, this.idps)\n            })\n        }\n        else {\n          this.dispatch(AISEvents.AUTHENTICATION_FAILED, response)\n          return this.fail()\n        }\n      })\n  }\n\n  authorize(resourceId = this.config.resourceId) {\n    return this.resourceAccess(resourceId)\n      .then((response) => {\n        if (response.authorization === true) {\n          this.viewerId = this.client.aisuid\n          const auth = {key: this.config.query || \"hdnts\", token: response.security_token}\n          this.dispatch(AISEvents.AUTHORIZED, auth)\n          return auth\n        }\n        else {\n          this.dispatch(AISEvents.AUTHORIZATION_FAILED, response)\n          return this.fail()\n        }\n      })\n  }\n\n  sort(obj, sortType, valueName) { // Object sorter, used for chooser data\n    const returnObj = {}\n    const data = []\n    let index = 0\n\n    for (let key in obj) {\n      data[index] = {\n        key: key,\n        value: obj[key][valueName] || \"\"\n      }\n      index++\n    }\n\n    data.sort(function (a, b) {\n      const valueA = (sortType === \"value\") ? a.value.toLowerCase() : a.key.toLowercase()\n      const valueB = (sortType === \"value\") ? b.value.toLowerCase() : b.key.toLowercase()\n\n      if (valueA < valueB) { // sort string ascending\n        return -1\n      }\n      else if (valueA > valueB) {\n        return 1\n      }\n      else {\n        return 0 // default return value (no sorting)\n      }\n    });\n\n    // Build new object based on sorted array\n    return data.reduce(function (map, item) {\n      map[item.key] = obj[item.key]\n      return map\n    }, {})\n  }\n\n  getTarget(method = \"redirect\") {\n    return this.config.responseTargets[method]\n  }\n\n  setRedirect(method) {\n    try {\n      const devToken = /\\/dev\\./\n      const loc = window.top.location.href || window.top.location\n      const domain = (devToken.test(loc)) ? loc.replace(devToken, \"/\") : null\n      akamai.amp.Cookies.setCookie(this.getTarget(method), loc, 1, \"/\", domain)\n    }\n    catch (error) {}\n  }\n\n  launchIdp(idp_platform_id) {\n    const idp = (idp_platform_id != null) ? this.idps[idp_platform_id] : this.idps\n    const display = idp.window_display || {}\n    const method = (display.method != null) ? display.method : \"redirect\"\n    const target = this.getTarget(method)\n    const format = (idp_platform_id != null) ? this.client.loginFormat(idp_platform_id, target) : this.client.logoutFormat(target)\n\n    this.setRedirect(method)\n\n    switch (method) {\n      case \"redirect\":\n        window.open(format, \"_top\") // Full page redirect\n        break;\n      case \"popup\":\n        //method = display.method || \"popup\"\n        const width = display.width || 320\n        const height = display.height || 240\n        window.open(format, \"ais_popup\", `width=${width},height=${height}`)\n    }\n  }\n\n  login(idp_platform_id) {\n    this.launchIdp(idp_platform_id)\n  }\n\n  logout() {\n    this.launchIdp()\n  }\n}\n","import \"./main.less\"\nimport AIS from \"./AIS\"\nimport AISEvents from \"./AISEvents\"\n\n\nakamai.amp.AMP.registerPlugin(\"ais\", akamai.amp.Plugin.createFactory(AIS))\n\nexport {default as AISEvents} from \"./AISEvents.js\"\nexport {AIS}\n"]}