{"version":3,"sources":["../../../../src/MediaAnalytics.js","../../../../src/MediaAnalyticsFlash.js","../../../../src/main.js"],"names":["akamaiLibrary","JS_AkamaiMediaAnalytics","dimensions","key","val","value","getStreamHeadPosition","getCurrentTime","this","setData","player","evaluateBindings","ads","onadbreakstart","bind","addEventListener","onadloaded","onadstarted","onadbreakend","onadended","onaderror","onadfirstquartile","akamaiLibraryInitialised","amaCallbacks","handlePlaying","media","src","setStreamURL","config","viewerID","viewerId","mediaanalytics","akamia","Utils","duaration","data","adObject","event","duration","adVO","title","id","handleAdLoaded","error","currentTime","detail","handleBufferStart","handleBufferEnd","bitrate","akamai","Plugin","MediaAnalyticsFlash","__proto__","Object","getPrototypeOf","call","xml","element","metrics","vendor","createElement","appendChild","createProperty","plugin","swf","push","amp","FlashPlugin","registerPlugin"],"mappings":"2SAISA,0BAAoBC,EACpBD,uJAKDE,GAAAA,EAAaC,EACjB,OAAKC,MACOC,GAAVD,6HAUGE,GAALC,gFAQIC,KAAAR,cAAAS,QAAAN,EAAAK,KAAAE,OAAAC,iBAAAT,EAAAC,WAEKH,+JAYLY,iBACF,aAAAJ,KAAAK,eAAAC,KAAAN,qEAEEO,iBAAiB,SAAAP,KAAcQ,WAAKH,KAAAA,SACpCE,iBAAiB,UAArBP,KAAiCS,YAAKC,KAAaJ,SAC/CC,iBAAiB,QAArBP,KAA+BW,UAAKH,KAAWF,SAC3CC,iBAAiB,UAAWP,KAAKS,iBAAiBH,KAAtDN,SACIO,iBAAiB,QAASP,KAAKW,UAAUL,KAAKN,SAE9CO,iBAAiB,gBAAcK,KAAAA,kBAAnCN,KAAAN,qEAEIO,iBAAiB,gBAAiBP,KAAKa,kBAAkBP,KAAKN,sJAO9DR,cAAKsB,kBAA4B,GAArCd,MAA4Ce,aAAAf,KAAAE,cACrCA,0BAAkB,sSAYrBV,cAAAwB,qFAQAtB,0BAAJ,qEAEKoB,cAAAA,aAA2BG,EAAhCC,KAAA,SAEK1B,KAAc2B,OAAAA,UAAmBD,KAAKE,OAA3CC,UAAArB,KAAAoB,OAAA,8BAEIE,cAAgBF,YAAOE,wDAKdL,OAAMM,IAAAA,MAAAA,SAAnBvB,KAAAoB,OAAA1B,WAAA0B,EAAA1B,YAEe8B,KAAAA,OAAWC,wLASXC,EAAWC,+IAKTV,yVAoBbW,WACSC,EAAAA,iBACPD,EAAWE,qBACJC,EAAKC,+BAGRD,OAAKE,IAAAA,wCAJbzC,cAAA0C,eAAAN,SAMK1B,QACAV,OAAAA,OAAc0C,MAAAA,8BAAnBC,oZAiBaN,s0BA+BX3B,OAAKA,OAAOkC,IAAAA,4KAOZlC,OAAKA,OAAOkC,IAAAA,qKAMHP,EAAAQ,8IAKGR,cAAOS,oBAAAtC,KAAAR,cAAA+C,mLAQDV,EAAAF,KAAAa,mCArNkBC,EAAWC,SAAAA,qGCEzB1C,MAAA2C,EAAAC,WAAAC,OAAAC,eAAAH,IAAAI,KAAA/C,KAAAE,EAAAkB,yQAkBLpB,KAAAE,OAAAkB,OAAAH,OAAAjB,KAAAE,OAAAkB,OAAAH,MAAAM,kBAED,MAAd7B,iBAEFA,EAAAA,UAAoBC,GAAAD,EAAAC,0EAQlBqD,EAAMnB,EAAMQ,qBAAlB,WAAA,EAGc,OAAVY,mCAEAC,YAAiBA,uEAKfC,YAAaC,GAEnB,WAAQC,OAAAA,OAAR,4EAGOC,KAAAA,OAALC,OAAyBC,KAAA,6RAWf3B,EAAAA,eAAOnC,WAAA,GACbuB,kBACFA,GAAMM,KAAAA,GAANA,eAA8BA,aAC1B7B,WAAa+D,MAAnB9D,IAAAA,EAAAE,MAAAoB,EAAAM,eAAA7B,WAAAC,4EAtDM,YACF,0DACE,wEATqC8C,IAAOiB,IAAIC,eAAAA,iBAAAA,OAAAA,OAAAA,IAAAA,OAAAA,cAAAA,+FCI5DlB,EAAOiB,eAAQE","file":"akamai/amp/mediaanalytics/Mediaanalytics.min.js","sourcesContent":["export default class MediaAnalytics extends akamai.amp.Plugin {\n\n  constructor(player, config) {\n    super(player, config)\n    this.akamaiLibrary = new JS_AkamaiMediaAnalytics(config.config)\n    this.akamaiLibrary.disableLocation()\n    this.akamaiLibraryInitialised = false\n  }\n\n  setDimensions(value) {\n    let dimensions = this.config.dimensions\n    for (let key in value) {\n      let val = value[key]\n      if (val != null) {\n        dimensions[key] = val // TODO: Does this need to be evaluated for bindings?\n      }\n    }\n    this.applyDimensions(dimensions)\n    return value\n  }\n\n  amaCallbacks(playerInstance) {\n    this.getStreamHeadPosition = function() {\n      if (playerInstance) {\n        return playerInstance.getCurrentTime()\n      }\n    }\n  }\n\n  applyDimensions(dimensions) {\n    try {\n      for (let key in dimensions) {\n        this.akamaiLibrary.setData(key, this.player.evaluateBindings(dimensions[key]))\n      }\n    }\n    catch (error) {\n      this.player.logger.error(\"[AMP MEDIA ANALYTICS ERROR]\", \"Could not set dimensions:\", error)\n    }\n  }\n\n  onready(event) {\n    //this.akamaiLibrary.enableDebugLogging(this.debug)\n\n    let ads = this.player.ads\n    if (ads == null)\n      return\n\n    ads.addEventListener(\"breakstart\", this.onadbreakstart.bind(this))\n    ads.addEventListener(\"breakend\", this.onadbreakend.bind(this))\n    ads.addEventListener(\"loaded\", this.onadloaded.bind(this))\n    ads.addEventListener(\"started\", this.onadstarted.bind(this))\n    ads.addEventListener(\"ended\", this.onadended.bind(this))\n    ads.addEventListener(\"skipped\", this.onadbreakskipped.bind(this))\n    ads.addEventListener(\"error\", this.onaderror.bind(this))\n\n    ads.addEventListener(\"firstquartile\", this.onadfirstquartile.bind(this))\n    ads.addEventListener(\"midpoint\", this.onadmidpoint.bind(this))\n    ads.addEventListener(\"thirdquartile\", this.onadthirdquartile.bind(this))\n\n  }\n\n  onplayrequest(event) {\n    if (this.akamaiLibraryInitialised == false) {\n      this.player.logger.log(\"[AMP MA EVENT] - handleSessionInit\")\n      this.akamaiLibrary.handleSessionInit(new this.amaCallbacks(this.player))\n      this.akamaiLibraryInitialised = true\n    }\n  }\n\n  onmediasequenceended(event) {\n    this.player.logger.log(\"[AMP MA EVENT] - handlePlayEnd\")\n    this.akamaiLibrary.handlePlayEnd()\n  }\n\n  onplaying(event) {\n    if (this.player.ads != null && this.player.ads.inProgress)\n      return\n    this.player.logger.log(\"[AMP MA EVENT] - handlePlaying\")\n    this.akamaiLibrary.handlePlaying()\n  }\n\n  onmediachange(event) {\n    let media = event.detail\n    let dimensions = null\n\n    this.akamaiLibraryInitialised = false\n    this.player.logger.log(\"[AMP MA EVENT] - setStreamURL\", media.src)\n    this.akamaiLibrary.setStreamURL(media.src, true)\n\n    let viewerId = this.config.viewerId || this.config.viewerID || this.config[\"std:viewerId\"]\n    if (viewerId != null) {\n      this.akamaiLibrary.setViewerId(viewerId)\n    }\n\n    let config = media.mediaanalytics\n    if (config != null && config.dimensions != null) {\n      dimensions = akamia.amp.Utils.override(this.config.dimensions, config.dimensions)\n    } else {\n      dimensions = this.config.dimensions\n    }\n\n    //this.akamaiLibrary.handleStreamSwitch()\n    this.applyDimensions(dimensions)\n  }\n\n  ondurationchange(duaration) {\n    this.player.logger.log(\"[AMP MA EVENT] - setStreamDuration\", duaration.data)\n    this.akamaiLibrary.setStreamDuration(duaration.data)\n  }\n\n  updateMedia(media) {\n    this.player.logger.log(\"[AMP MA EVENT] - handleTitleSwitch\")\n    this.akamaiLibrary.handleTitleSwitch(media)\n  }\n\n  onfragmentloadstart(event) {\n    if (typeof fragmentDownloadStarted === \"function\") {\n      fragmentDownloadStarted(event.detail)\n    }\n  }\n\n  onadbreakstart() {\n    this.player.mediaElement.dataset.isad = true\n  }\n\n  onadbreakend() {\n    this.player.mediaElement.dataset.isad = false\n  }\n\n  onadloaded(event) {\n    try {\n      let adVO = event.data\n      let adObject = {\n        adTitle: adVO.title,\n        adDuration: adVO.duration,\n        adPartnerId: adVO.partner,\n        adId: adVO.id\n      }\n      this.player.logger.log(\"[AMP MA EVENT] - handleAdLoaded\")\n      this.akamaiLibrary.handleAdLoaded(adObject)\n    }\n    catch (error) {\n      this.player.logger.error(\"[AMP MEDIA ANALYTICS ERROR]\", error)\n    }\n  }\n\n  onadstarted() {\n    this.player.logger.log(\"[AMP MA EVENT] - handleAdStarted\")\n    this.akamaiLibrary.handleAdStarted()\n  }\n\n  onadbreakskipped() {\n    this.player.logger.log(\"[AMP MA EVENT] - handleAdSkipped\")\n    this.akamaiLibrary.handleAdSkipped()\n  }\n\n  onaderror(event) {\n    this.player.logger.log(\"[AMP MA EVENT] - handleAdError\")\n    this.akamaiLibrary.handleAdError(event)\n  }\n\n  onadfirstquartile() {\n    this.player.logger.log(\"[AMP MA EVENT] - handleAdFirstQuartile\")\n    this.akamaiLibrary.handleAdFirstQuartile()\n  }\n\n  onadmidpoint() {\n    this.player.logger.log(\"[AMP MA EVENT] - handleAdMidPoint\")\n    this.akamaiLibrary.handleAdMidPoint()\n  }\n\n  onadthirdquartile() {\n    this.player.logger.log(\"[AMP MA EVENT] - handleAdThirdQuartile\")\n    this.akamaiLibrary.handleAdThirdQuartile()\n  }\n\n  onadended() {\n    this.player.logger.log(\"[AMP MA EVENT] - handleAdComplete\")\n    this.akamaiLibrary.handleAdComplete()\n  }\n\n  onpause() {\n    this.player.logger.log(\"[AMP MA EVENT] - handlePause\")\n    this.akamaiLibrary.handlePause()\n  }\n\n  onseeking() {\n    if (this.player.currentTime > 0.1 || this.player.currentTime === 0) {\n      this.akamaiLibrary.handleSeekStart()\n      this.player.logger.log(\"[AMP MA EVENT] - handleSeekStart\")\n    }\n  }\n\n  onseeked() {\n    if (this.player.currentTime > 0.1 || this.player.currentTime === 0) {\n      this.akamaiLibrary.handleSeekEnd()\n      this.player.logger.log(\"[AMP MA EVENT] - handleSeekEnd\")\n    }\n  }\n\n  onerror(event) {\n    this.player.logger.log(\"[AMP MA EVENT] - handleError\", event.detail)\n    this.akamaiLibrary.handleError(event.detail)\n  }\n\n  onbufferingchange(event) {\n    this.player.logger.log(\"[AMP MA EVENT] - handleBufferStart\", event.detail)\n    if (event.detail === true)\n      this.akamaiLibrary.handleBufferStart()\n    else\n      this.akamaiLibrary.handleBufferEnd()\n  }\n\n  onqualitychanged(event) {\n    this.player.logger.log(\"[AMP MA EVENT] - handleBitRateSwitch\", event.data.bitrate)\n    this.akamaiLibrary.handleBitRateSwitch(event.data.bitrate)\n  }\n\n}\n","export default class MediaAnalyticsFlash extends akamai.amp.FlashPlugin {\n\n  constructor(player, config) {\n    super(player, config)\n  }\n\n  get flashPlugins() {\n    return [{\n      id: \"OSMFCSMALoader\",\n      host: \"osmf\",\n      main: \"com.akamai.playeranalytics.osmf.OSMFCSMALoaderInfo\",\n      type: \"application/x-shockwave-flash\"\n    }]\n  }\n\n  setDimensions(value) {\n    this.player.mediaElement.setPlayerProperty(\"maDimensions\", value)\n    return value\n  }\n\n  createFlashVars(event) {\n    const flashvars = event.detail.flashvars\n    const dimensions =  this.player.config && this.player.config.media && this.player.config.media.mediaanalytics\n\n    if (dimensions != null) {\n      for (let key in dimensions) {\n        flashvars[\"report_\" + key] = dimensions[key]\n      }\n    }\n  }\n\n  createXML(event) {\n    const xml = event.detail.xml\n    const application = xml.firstChild\n    let metrics = xml.getElementsByTagName(\"metrics\")[0]\n    let element = null\n\n    if (metrics == null) {\n      metrics = xml.createElement(\"metrics\")\n      application.appendChild(metrics)\n    }\n\n    const vendor = xml.createElement(\"vendor\")\n    vendor.setAttribute(\"id\", \"akamai\")\n    metrics.appendChild(vendor)\n\n    if (this.config.config != null) {\n      this.createProperty(xml, \"MEDIA_ANALYTICS_BEACON\", this.config.config, vendor)\n\n      const path = this.config.plugin.swf || \"http://79423.analytics.edgesuite.net/csma/plugin/csma.swf\"\n      this.createProperty(xml, \"MEDIA_ANALYTICS_PLUGIN_PATH\", path, vendor)\n    }\n\n    if (this.config.dimensions != null) {\n      this.createProperty(xml, \"dimensions\", this.config.dimensions, vendor)\n    }\n  }\n\n  onmediachange(event) {\n    const media = event.detail\n    if (media.mediaanalytics && media.mediaanalytics.dimensions) {\n      media.dimensions = []\n      for (let key in media.mediaanalytics.dimensions) {\n        media.dimensions.push({key: key, value: media.mediaanalytics.dimensions[key]})\n      }\n    }\n  }\n}\n","import MediaAnalytics from \"./MediaAnalytics.js\"\nimport MediaAnalyticsFlash from \"./MediaAnalyticsFlash.js\"\n\nakamai.amp.AMP.registerPlugin(\"mediaanalytics\", \"html\", akamai.amp.Plugin.createFactory(MediaAnalytics))\nakamai.amp.AMP.registerPlugin(\"mediaanalytics\", \"flash\", akamai.amp.Plugin.createFactory(MediaAnalyticsFlash))\n\nexport {MediaAnalytics}\n"]}