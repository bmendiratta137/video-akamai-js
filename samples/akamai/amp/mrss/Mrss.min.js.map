{"version":3,"sources":["../../../../src/MRSSEvents.js","../../../../src/MRSS.js","../../../../src/main.js"],"names":["ERROR","MRSS","_akamai$amp$Plugin","feature","feed","akamai","helper","url","func","data","_this2","setTimeout","_data","value","createFeed","media","this","item","MRSSEvents","_url","evaluatePaths","dispatch","REQUEST","getFeed","error","_this3","logger","amp","Plugin","registerPlugin"],"mappings":"mDAAAA,MAAA,gBACW,iBACF,UAFTC,EAAA,SAAAC,kOCMSC,wJAkCQC,iBAEMC,gBAAbC,6JAcAC,EAAM,IAED,OAAPC,GAAJ,IAAAD,EAAAC,EAAA,2BAEmBD,MAARE,IAAQF,EACjBC,iBAAaE,GAAKH,KAAMA,IAExB,kBAAAC,IAAAG,WAAAH,EAAA,gEApDUI,+BAGLC,OAAOC,WAAAD,QACTD,OAALG,MAAAC,KAAAZ,KAAAa,KAAA,QACKb,SAAOc,EAAYJ,QAAZE,KAAuBH,iEAMnCA,0DAIKM,SAAOD,EAAYE,QAAAA,KAAcP,wDAEjCQ,SAASH,EAAWI,OAASlB,KAC7BE,KAAOiB,UAEHF,SAASH,KACTT,SAAOL,EAAZJ,OAAAwB,MAAAA,EAAAjB,IAAAM,IAHJY,EAKSC,OAAAF,MAACA,wBAAUC,EAAAN,KAAAK,sCAhCUnB,IAAOsB,IAAIC,eAAAA,OAAAA,OAAAA,IAAAA,OAAAA,cAAAA,ICA7CvB,EAAOsB,KAAQE","file":"akamai/amp/mrss/Mrss.min.js","sourcesContent":["export default {\n  CHANGED: \"changed\",\n  ERROR: \"error\",\n  REQUEST: \"request\",\n  LOADED: \"laoded\"\n}\n","import MRSSEvents from \"./MRSSEvents\"\n\nexport default class MRSS extends akamai.amp.Plugin {\n  constructor(player, config) {\n    super(player, config)\n\n    this.feature = \"feed\"\n    this.helper = new akamai.amp.utils.MRSSHelper()\n  }\n\n  get data() {\n    return this._data\n  }\n\n  set data(value) {\n    this._data = value\n    this.feed = this.helper.createFeed(value)\n    this.player.media = this.feed.item[0]\n    this.dispatch(MRSSEvents.CHANGED, this.feed)\n  }\n\n  get url() {\n    return this._url\n  }\n\n  set url(value) {\n    this._url = this.player.evaluatePaths(value)\n\n    this.dispatch(MRSSEvents.REQUEST, this._url)\n    this.helper.getFeed(this._url)\n      .then((feed) => {\n        this.dispatch(MRSSEvents.LOADED, feed)\n        this.data = feed\n      })\n      .catch((error) => {\n        this.dispatch(MRSSEvents.ERROR, {error: error, url: value})\n        this.logger.error(\"[AMP Feed Load Error]\", this._url, error)\n      })\n  }\n\n  mediaTransform(feed) {\n    let promise = Promise.resolve(feed)\n    const helper = new akamai.amp.utils.MRSSHelper()\n\n    if (typeof feed == \"string\") {\n      promise = helper.getFeed(feed)\n    }\n\n    promise = promise.then((feed) => {\n      return helper.createFeed(feed).item[0]\n    })\n\n    return promise\n  }\n\n  onready() {\n    const url = this.config.url\n    const data = this.config.data\n    let func = null\n\n    if (url != null && url != \"\")\n      func = () => this.url = url\n    else if (data != null)\n      func = () => this.data = data\n\n    if (typeof func == \"function\")\n      setTimeout(func, 1)\n  }\n}\n","import MRSS from \"./MRSS\"\n\nakamai.amp.AMP.registerPlugin(\"mrss\", akamai.amp.Plugin.createFactory(MRSS))\n\nexport {default as MRSSEvents} from \"./MRSSEvents\"\nexport {MRSS}\n"]}