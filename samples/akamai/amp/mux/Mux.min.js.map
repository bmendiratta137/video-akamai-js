{"version":3,"sources":["../../../../src/Mux.js","../../../../src/main.js"],"names":["Mux","player","mux","config","Object","version","initTime","container","this","element","isAdEvent","mapEvents","map","muxEvent","playerEvent","inProgress","ads","console","log","emit","test","enabled","media","event","guid","duration","title","temporalType","poster","type","mediaElement","isNaN","undefined","Math","round","language","paused","getPlayheadTime","displayState","clientWidth","clientHeight","akamai","amp"],"mappings":"2DACqBA,aAAAA,eAAAA,KAAAA,oCAEZC,IAALC,SACKC,KAALC,OAAcD,6BACd,8BAC0BF,EAAAI,+BACF,oCACGJ,4BACDK,sBAGvBH,KAAAA,EANHI,UAAAC,iFAaMC,GAAUR,EAAOM,EAAvBG,oBAESC,iBAAkBC,EAAKF,GAAW,SAAAD,EAAAI,EAAAC,IAChCD,GAAYD,EAAKG,aAEjBL,aAAaM,KAAID,IACpBE,QAAAC,IAAA,WAAAL,OAEEM,KAACV,EAAaW,mHAQdnB,gBACA,mBACG,qBACF,8DAIA,YAPXe,EAAAK,WAAA,SAYIL,UAAA,qBACa,wBACA,uDAGH,wBACG,2BACF,2BACQ,8DAGR,eAVbA,yJAwBIM,KAAAA,OAAQC,UAAd,wBACYD,EAAAE,iBACHvB,EAAOM,qBACEiB,EADwBC,uBAAA,QAE3BH,EAAMI,8BACHJ,EAAMG,wBACNH,EAAMK,2BACEC,EALgBC,8EAYtC5B,EAAcA,EAAlB6B,wCAEmB7B,EAAO6B,+BACnBC,MAAAD,EAAAL,UAAAO,OAAAC,KAAAC,MAAA,IAAAJ,EAAAL,8BACgBxB,EAAOkC,iCACCL,8BACRA,4BACDA,KAAAA,uCAJf,cAKa7B,EAAOmC,kCACEC,6BACGC,6BACVrC,kCACD6B,kCACGS,EAAAA,2BACP9B,EAAQ+B,0BACDvC,EAAAA,wLCnG5BwC,EAAOC,IAAP1C","file":"akamai/amp/mux/Mux.min.js","sourcesContent":["\nexport default class Mux {\n  constructor(player, config) {\n    this.player = player\n    this.config = config\n    this.sdk = mux\n    this.data = Object.assign({\n      player_software_name: \"AMP\",\n      player_software_version: player.version,\n      player_mux_plugin_name: \"amp-mux\",\n      player_mux_plugin_version: \"1.66.0\",\n      player_init_time: player.initTime,\n    }, config.data)\n\n    mux.init(player.container, this)\n  }\n\n  onready() {\n    const ads = player.ads || {enabled: false, inProgress: false}\n    const element = player.container\n\n    function mapEvents(target, map, isAdEvent) {\n      for (var muxEvent in map) {\n        target.addEventListener(map[muxEvent], function (element, muxEvent, playerEvent) {\n          if (!isAdEvent && ads.inProgress)\n            return\n\n          if (!/timeupdate/.test(muxEvent))\n            console.log(\"mux.emit\", muxEvent); // TODO: Replace with player.logger.log\n\n          mux.emit(element, muxEvent)\n        }.bind(null, element, muxEvent))\n      }\n    }\n\n    mapEvents(player, {\n      \"play\": \"play\",\n      \"playing\": \"playing\",\n      \"pause\": \"pause\",\n      \"timeupdate\": \"timeupdate\",\n      \"seeking\": \"seeking\",\n      \"seeked\": \"seeked\",\n      \"error\": \"error\",\n      \"ended\": \"ended\",\n      \"stalled\": \"stalled\"\n    })\n\n    if (ads.enabled === true) {\n      mapEvents(ads, {\n        \"adrequest\": \"request\",\n        \"adresponse\": \"response\",\n        \"adbreakstart\": \"breakstart\",\n        \"adplay\": \"play\",\n        \"adplaying\": \"playing\",\n        \"adpause\": \"pause\",\n        \"adfirstquartile\": \"firstquartile\",\n        \"admidpoint\": \"midpoint\",\n        \"adthirdquartile\": \"thirdquartile\",\n        \"adended\": \"ended\",\n        \"adbreakend\": \"breakend\",\n        \"aderror\": \"error\"\n      }, true)\n\n      mapEvents(ads, {\n        \"adplay\": \"breakstart\"\n      }, true)\n    }\n\n    mux.emit(element, \"playerready\")\n  }\n\n  onmediachange(event) {\n    const media = event.detail\n    console.log(\"mux.emit\", \"videochange\")\n    mux.emit(player.container, \"videochange\", {\n      video_id: media.guid,\n      video_title: media.title,\n      video_duration: media.duration,\n      video_is_live: (media.temporalType == \"live\"),\n      video_poster_url: media.poster,\n      video_source_url: media.src,\n      video_source_mime_type: media.type\n    })\n  }\n\n  getStateData() {\n    var player = this.player\n    var error = player.error || {}\n    var mediaElement = player.mediaElement\n    return {\n      video_language_code: player.language,\n      video_source_duration: isNaN(mediaElement.duration) ? undefined : Math.round(mediaElement.duration * 1000),\n      video_source_height: mediaElement.videoHeight,\n      video_source_width: mediaElement.videoWidth,\n      player_is_paused: player.paused,\n      player_playhead_time: this.getPlayheadTime(),\n      player_is_fullscreen: (player.displayState == \"fullscreen\"),\n      player_autoplay_on: player.autoplay,\n      player_preload_on: mediaElement.preload,\n      player_width: element.clientWidth,\n      player_height: element.clientHeight,\n      player_language_code: player.language,\n      player_error_code: error.code,\n      player_error_message: error.message\n    }\n  }\n\n  getPlayheadTime() {\n    return Math.round(this.player.getCurrentTime() * 1000)\n  }\n}\n","import Mux from \"./Mux.js\"\n\nakamai.amp.AMP.registerPlugin(\"mux\", akamai.amp.Plugin.createFactory(Mux))\n\nexport {Mux}\n"]}