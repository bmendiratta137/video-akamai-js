{"version":3,"sources":["../../../../src/YoSpace.js","../../../../src/main.js"],"names":["inProgress","bindHandlers","DEBUGGING","_this","debug","sdk","YSSessionManager","data","event","detail","textTracks","_this2","player","i","len","textTrack","kind","sample","samples","forEach","info","akamai","regex","match","key","value","test","pts","frag","endPTS","replace","cue","type","src","createSession","logger","props","Promise","resolve","reject","temporalType","media","func","result","registerPlayer","_this4","sessionManager","this","onclick","mediaElement","id3","keys","Object","diff","length","NONLINEAR","idx","amp","AdPlugin","registerPlugin"],"mappings":"mPAKSA,cAAa,eAAlB,aAAA,cAAA,YAAA,iBAAA,oCAEKC,SAAcC,UAAgBC,EAAAC,gFAG9BC,QAAOC,EAAAA,QAAAA,KAAAA,uSAYR,GAAAC,GAAAC,EAAiBC,OAAAF,QAEXA,OAKAG,GAHFA,GACFC,EAAAC,OAAAF,kBAEIA,EAAAA,EAAAA,EAAaA,EAAYA,OAA/BG,EAAAC,EAAAD,OACA,aAAIE,EAAYF,GAAhBG,KAAA,GACgBF,EAAMJ,oBAOlBK,QAAAA,QAAJ,SACEE,6EAEGC,EAAQC,qBACLC,GAAOC,KAAAA,MACPC,QAAQA,EAAA,SAAAC,EAAdC,EAAAC,MACKH,GAAMI,GAAKN,QACdH,EAAAU,IAAApB,EAAAqB,KAAAC,OAAA,MACGC,KAAQR,YACLS,WACFC,QACJR,EAAYC,OACLD,KAECC,OAAAA,sKAUTQ,IAAKC,EAEHC,0HAMUC,IAAYC,SAAA,SAAAC,EAAAC,SACXD,QAATD,EAAQG,aAAA,gBAAqB,8EAExBC,SAARC,EAAQH,EAAD,+BAEPI,eAAJC,eACgBC,UAEXC,EAAAA,eAAeF,iIAOPnC,EAAQA,oFAMZ,QAAAsC,KAAAC,cAERpC,YAAOqC,+VAsBD,QAAAF,KAAAC,cAENpC,YAAOqC,whBA6BNxB,KAAAA,KAAQjB,EAAMC,MAELgB,MAAXsB,KAACG,gDAOIzB,OAAT0B,KAAsB1B,KAAML,sEAEtB+B,EAAOC,SAAYvC,IACzB,KAAAwC,EAAAC,iEAEID,IAAKC,krBAkCCC,UAAAC,sCAlMuBnC,IAAOoC,IAAIC,eAAAA,UAAAA,OAAAA,IAAAA,OAAAA,cAAAA,ICEhDrC,EAAOoC,QAAQE","file":"akamai/amp/yospace/Yospace.min.js","sourcesContent":["export default class YoSpace extends akamai.amp.AdPlugin {\n  constructor(player, config) {\n    super(player, config)\n\n    this.feature = \"ads\"\n    this.inProgress = false\n\n    this.bindHandlers([\"AdBreakStart\", \"AdBreakEnd\", \"AdvertStart\", \"AdvertEnd\", \"UpdateTimeline\", \"AnalyticsFired\"])\n\n    YSSessionManager.DEFAULTS.DEBUGGING = this.debug\n    this.sdk = {YSSessionManager, YSPlayerEvents}\n\n    this.onclick = this.onclick.bind(this)\n\n    // setup transforms\n    if (config.transform !== false) {\n      this.player.addTransform(akamai.amp.TransformType.MEDIA, this.mediaTransform.bind(this))\n    }\n  }\n\n  onready(event) {\n    // TODO: This is a hack to get around the issue that hlsjs does not convert YoSpace ID3 tags into TextTrack DataCues\n    if (this.player.hls) {\n      this.player.hls.addEventListener(\"hlsFragParsingMetadata\", (event) => {\n        const data = event.detail.data\n\n        if (!data)\n          return\n\n        const textTracks = this.player.textTracks\n        let textTrack = null\n        for (let i = 0, len = textTracks.length; i < len; i++) {\n          if (textTracks[i].kind === \"metadata\") {\n            textTrack = textTracks[i]\n            break\n          }\n        }\n\n        if (textTrack == null)\n          return\n\n        data.samples.forEach((sample) => {\n          const info = akamai.amp.Utils.arrayBufferToString(sample.data).replace(/\\n|\\r|Ã¿/g, \"\")\n          const regex = /(Y[A-Z]{3})([^Y]+)/g\n          if (!regex.test(info))\n            return\n          info.replace(regex, (match, key, value) => {\n            const cue = new VTTCue(sample.pts, data.frag.endPTS, \"\")\n            cue.type = \"org.id3\"\n            cue.value = {\n              key: key,\n              value: key + value,\n              info: value\n            }\n            textTrack.addCue(cue)\n          })\n        })\n      })\n    }\n  }\n\n  mediaTransform(media) {\n    return this.createSession(media)\n      .then((url) => {\n        this.logger.log(\"[AMP YoSpace] Session Created\", url)\n        media.src = url\n        return media\n      })\n  }\n\n  createSession(media, props = {}) {\n    return new Promise((resolve, reject) => {\n      // TODO: Do we need to implement createForNonLinear?\n      const func = (media.temporalType == \"live\") ? \"createForLive\" : \"createForVoD\";\n      this.sessionManager = YSSessionManager[func](media.src, props, (result) => {\n        if (result == \"error\")\n          return reject(\"Could not create session\")\n\n        this.sessionManager.registerPlayer(this)\n\n        resolve(this.sessionManager.masterPlaylist())\n      });\n    });\n  }\n\n  reportEvent(event, detail) {\n    if (this.sessionManager == null)\n      return\n    this.sessionManager.reportPlayerEvent(event, detail)\n  }\n\n  AdBreakStart() {\n    // Function gets called whenever an advert break starts\n    this.player.mediaElement.addEventListener(\"click\", this.onclick)\n\n    this.inProgress = true\n\n    // TODO: We need to figure out how to populate the AdVO object\n    this.dispatch(akamai.amp.AdEvents.BREAK_START, new akamai.amp.AdVO())\n  }\n\n  AdvertStart(mediaId) {\n    // Function gets called at the start of each advert within a break\n    // (except for filler content - eg ident etc)\n\n    this.dispatch(akamai.amp.AdEvents.STARTED, new akamai.amp.AdVO())\n  }\n\n  AdvertEnd(mediaId) {\n    // Function gets called at the end of each advert within a break\n    // (except for filler content - eg ident etc)\n\n    this.dispatch(akamai.amp.AdEvents.ENDED, new akamai.amp.AdVO())\n  }\n\n  AdBreakEnd() {\n    // Function gets called at the end of an advert break signalling a return to main content\n    this.player.mediaElement.removeEventListener(\"click\", this.onclick)\n\n    this.inProgress = false\n    this.dispatch(akamai.amp.AdEvents.BREAK_END, new akamai.amp.AdVO())\n  }\n\n  UpdateTimeline(timeline) {\n    // Function gets called whenever there is updated information concerning the playback timeline\n    // (for VoD and NonLinear content only)\n    console.log(\"YoSpace -> UpdateTimeline\", timeline)\n  }\n\n  AnalyticsFired(call_id, call_data) {\n    // Function gets called whenever an analytics call is made by the SDK.\n  }\n\n  ontimeupdate(event) {\n    this.reportEvent(YSPlayerEvents.POSITION, event.detail)\n  }\n\n  onfullscreenchange(event) {\n    this.reportEvent(YSPlayerEvents.FULLSCREEN, event.detail)\n  }\n\n  onmuted(event) {\n    this.reportEvent(YSPlayerEvents.MUTE, event.detail)\n  }\n\n  ontimedmetadata(event) {\n    const value = event.detail.value\n\n    if (!/^Y/.test(value.key))\n      return\n\n    if (this.id3 == null) {\n      this.id3 = {}\n    }\n\n    this.id3[value.key] = value.info\n\n    const keys = Object.keys(this.id3)\n    const diff = [\"YCSP\", \"YDUR\", \"YMID\", \"YSEQ\", \"YTYP\"].filter(i => !keys.includes(i))\n\n    if (diff.length === 0) {\n      this.reportEvent(YSPlayerEvents.METADATA, this.id3)\n      this.id3 = null\n    }\n  }\n\n  onmediasequencestarted(event) {\n    this.reportEvent(YSPlayerEvents.START)\n  }\n\n  onmediasequenceended(event) {\n    this.reportEvent(YSPlayerEvents.END)\n  }\n\n  onpause(event) {\n    this.reportEvent(YSPlayerEvents.PAUSE)\n  }\n\n  onresume(event) {\n    this.reportEvent(YSPlayerEvents.RESUME)\n  }\n\n  onseeking(event) {\n    this.reportEvent(YSPlayerEvents.SEEK_START, this.player.currentTime)\n  }\n\n  onseeked(event) {\n    this.reportEvent(YSPlayerEvents.SEEK_END, this.player.currentTime)\n  }\n\n  onclick() {\n    this.reportEvent(YSPlayerEvents.CLICK)\n  }\n\n  nonlinear() {\n    let idx = null\n    this.reportEvent(YSPlayerEvents.NONLINEAR, idx)\n  }\n}\n","import YoSpace from \"./YoSpace.js\"\n\nakamai.amp.AMP.registerPlugin(\"yospace\", akamai.amp.Plugin.createFactory(YoSpace))\n\nexport {YoSpace}\n"]}