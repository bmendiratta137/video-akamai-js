{"version":3,"sources":["../../../../src/ClassList.js","../../../../src/Component.js","../../../../src/Container.js","../../../../src/Control.js","../../../../src/PanelControl.js","../../../../src/PlayPause.js","../../../../src/PauseOverlay.js","../../../../src/BufferingOverlay.js","../../../../src/Utils.js","../../../../src/CurrentTime.js","../../../../src/Live.js","../../../../src/Duration.js","../../../../src/Slider.js","../../../../src/Progress.js","../../../../src/Volume.js","../../../../src/Toggle.js","../../../../src/Mute.js","../../../../src/Fullscreen.js","../../../../src/SettingsButton.js","../../../../src/ListItem.js","../../../../src/Panel.js","../../../../src/PanelMenu.js","../../../../src/captionsettings/Home.js","../../../../src/captionsettings/Options.js","../../../../src/captionsettings/OptionsPanel.js","../../../../src/captionsettings/Color.js","../../../../src/captionsettings/BackgroundColor.js","../../../../src/captionsettings/BackgroundOpacity.js","../../../../src/captionsettings/CharacterEdgeStyle.js","../../../../src/captionsettings/FontColor.js","../../../../src/captionsettings/FontFamily.js","../../../../src/captionsettings/FontOpacity.js","../../../../src/captionsettings/FontSize.js","../../../../src/captionsettings/WindowColor.js","../../../../src/captionsettings/WindowOpacity.js","../../../../src/captionsettings/ScrollType.js","../../../../src/captionsettings/EdgeColor.js","../../../../src/captionsettings/EdgeOpacity.js","../../../../src/CaptionData.js","../../../../src/CaptionSettings.js","../../../../src/Quality.js","../../../../src/PlaybackRate.js","../../../../src/AudioTracks.js","../../../../src/SettingsPanel.js","../../../../src/ShareButton.js","../../../../src/SharePanel.js","../../../../src/CaptionToggleButton.js","../../../../src/JumpBack.js","../../../../src/JumpForward.js","../../../../src/Poster.js","../../../../src/Title.js","../../../../src/ErrorMsg.js","../../../../src/ContextMenu.js","../../../../src/Ads.js","../../../../src/Airplay.js","../../../../src/PiP.js","../../../../src/ChromeCast.js","../../../../src/Mode.js","../../../../src/ActiveState.js","../../../../src/UI.js","../../../../src/main.js"],"names":["ClassList","this","prepend","token","contains","tokens","unshift","i","splice","indexOf","remove","add","className","setState","toString","player","l10n","_this","handlers","forEach","_this2","handler","bind","props","nextState","key","state","nextProps","_key","playerEventMap","event","_this3","extends","ref","propsList","classList","events","amp","values","type","Events","data","_props","babelHelpers","objectWithoutProperties","object","PropTypes","React","Component","component","akamai","Utils","createUID","components","item","parent","dom","mouseFocus","altText","focused","scrollTop","onKeyPress","keyCode","onAction","value","onChange","title","tabIndex","onMouseDown","onMouseUp","onFocus","onBlur","onKeyDown","onClick","aria","PanelControl","__proto__","Object","getPrototypeOf","call","context","panel","Control","playState","play","parseInt","formatZeroFill","time","strTime","length","str","number","precision","window","pageXOffset","targetTouches","pageX","scrollX","pageY","scrollY","pageYOffset","plugin","enabled","config","disabled","liveClickHandler","percent","min","range","dragging","Math","max","round","getLocalizedString","format","isNumber","offset","pos","refs","element","getBoundingClientRect","code","increment","stopPropagation","preventDefault","onHandleMouseUp","onHandleMouseMove","addEventListener","removeEventListener","onMouseMove","style","width","onHandleMouseDown","onTouchStart","change","update","assign","valueText","textVisible","isTouch","bindHandlers","ads","onadmanagerloaded","onadtimeupdate","ondurationchange","currentTime","markers","clear","cues","duration","cue","index","left","startTime","getEventPos","clamp","states","text","clientWidth","textPercent","minClampValue","textValue","Slider","volume","get","isVolumeSettable","Volume","prototype","toggled","level","muted","Mute","Toggle","enterFullScreen","direction","parentNode","settingsPanel","close","tabable","document","getElementsByClassName","role","closeHandler","open","items","clickHandler","isOptionSelected","createElement","ListItem","_open","activeState","onopen","startActiveTimeout","onclose","_babelHelpers$get","Panel","Home","listOptions","language","captioning","tracks","track","getLanguageString","lang","OptionsList","map","selected","viewChange","label","OptionsPanel","captionsettings","options","len","setting","r","g","b","test","replace","a","activeIndex","Color","parts","parseFloat","labels","_ref","defineProperty","keyDown","settings","captions","CaptionData","hidden","selectTrackByLanguage","color","prevProps","gotoSettings","qualityLevels","onqualitylevelsloaded","detail","bitrate","push","autoLevel","qualityMode","findIndex","levelObject","qualityIndex","quality","playbackRate","PlaybackRate","audioTracks","activeIds","localization","id","getString","settingsLevel","brLabel","firstElem","focus","childNodes","isCaptionEnabled","componentEnabled","isQualityEnabled","audioTracksAvailable","qualityRef","playbackRef","changeState","PanelMenu","url","link","media","embed","CaptionToggleButton","ContextMenu","menuItems","akamaiGetViewerId","x","controlsMode","onadbreakstart","onadbreakend","onadstarted","container","mode","adVO","totalAds","position","msg","amp-ad-break","available","video","isAvailable","mediaElement","setAttribute","availability","webkitCurrentPlaybackTargetIsWireless","playing","Airplay","amp-playback-target-airplay","webkitPresentationMode","PiP","webkitSupportsPresentationMode","webkitSetPresentationMode","chromecast","ChromeCast","Mode","ActiveState","feature","contextMenuClick","isTouchDevice","autoHide","timeout","onMouseEnter","stopActiveTimeout","onMouseLeave","medium","amp-text-tracks","amp-waiting","IDLE","setTimeout","_this5","isMouseOverElement","ACTIVE","target","nodeName","isFocused","displayState","exitFullScreen","togglePlayPause","progress","body","contextMenu","removeContextMenu","appendChild","display","onContextMenu","Ads","PauseOverlay","BufferingOverlay","Progress","PlayPause","JumpBack","JumpForward","Duration","SettingsButton","Fullscreen","SettingsPanel","ErrorMsg","AUTO","_container$classList$","IdleUtil","viewComponent","idleUtil","INACTIVE","start","stop","active","inactive","amp-inactive","amp-idle","idle","_value","native","controls","ui","Promise","setPlayerProperty","UI","AMP"],"mappings":"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","file":"akamai/amp/react/React.min.js","sourcesContent":["export default class ClassList {\n\n  constructor(component, tokens = []) {\n    this.component = component\n    this.tokens = tokens\n  }\n\n  add(token, prepend = false) {\n    if (this.contains(token))\n      return\n\n    if (prepend === true) {\n      this.tokens.unshift(token)\n    } else {\n      this.tokens.push(token)\n    }\n  }\n\n  contains(token) {\n    return this.tokens.indexOf(token) !== -1\n  }\n\n  item(index) {\n    return this.tokens[index] || null\n  }\n\n  remove(token) {\n    const i = this.tokens.indexOf(token)\n     if (i === -1)\n       return\n    this.tokens.splice(i, 1)\n  }\n\n  toggle(token) {\n    if (this.contains(token)) {\n      this.remove(token)\n    } else {\n      this.add(token)\n    }\n  }\n\n  update(tokenMap) {\n    for (let token in tokenMap) {\n      if (tokenMap[token]) {\n        this.add(token)\n      } else {\n        this.remove(token)\n      }\n    }\n\n    let className = this.toString()\n    if (className != this.component.state.className) {\n      this.component.setState({className})\n    }\n  }\n\n  toString() {\n    return this.tokens.join(' ')\n  }\n}\n","import ClassList from \"./ClassList.js\"\n\nexport default class Component extends React.Component {\n\n  constructor (props, context) {\n    super(props, context)\n\n    this.state = {\n      l10n: this.player.l10n\n    }\n    this.classList = new ClassList(this, this.props.classList)\n  }\n\n  static get contextTypes() {\n    return {\n      player: PropTypes.object,\n      config: PropTypes.object,\n      plugin: PropTypes.object\n    }\n  }\n\n  get player() {\n    return this.props.player || this.context.player\n  }\n\n  get config() {\n    return this.props.config || this.context.config\n  }\n\n  get l10n() {\n    return this.state.l10n\n  }\n\n  get plugin() {\n    return this.context.plugin\n  }\n\n  get className() {\n    let className = this.props.className || \"\"\n    className += ` ${this.classList}`\n\n    return className.trim()\n  }\n\n  get textContent() {\n    return this.props.textContent || this.state.textContent\n  }\n\n  get children() {\n    return this.props.children || []\n  }\n\n  get element() {\n    return this.refs.element\n  }\n\n  get dom() {\n    return this.element || ReactDOM.findNode(this)\n  }\n\n  get data() {\n    return this.props.data || {}\n  }\n\n  get playerEventMap() {\n    const events = []\n\n    if (this.player == null)\n      return events\n\n    akamai.amp.Events.values.forEach((type) => {\n      let key = `on${type}`\n      if (typeof this[key] != \"function\")\n        return\n      events.push({key: key, type: type})\n    })\n\n    return events\n  }\n\n  get propsList() {\n    const { className, classList, data, textContent, ...props } = this.props\n    return props\n  }\n\n  getLocalizedString(key) {\n    return this.player.getLocalizedString(key)\n  }\n\n  onlanguagechange() {\n    this.setState({l10n: this.player.l10n})\n  }\n\n  bindHandlers(handlers) {\n    if (handlers == null || handlers.length <= 0)\n      return\n\n    handlers.forEach((handler) => {\n      if (typeof this[handler] != \"function\")\n        return\n      this[handler] = this[handler].bind(this)\n    })\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    let state = this.state\n    let props = this.props\n\n    if (nextState != null) {\n      for (let key in nextState) {\n        if (nextState[key] != state[key]) {\n          return true\n        }\n      }\n    }\n\n    // TODO: Is this needed?\n    if (nextProps != null) {\n      for (let key in nextProps) {\n        if (nextProps[key] != props[key]) {\n          return true\n        }\n      }\n    }\n\n    return false\n  }\n\n  componentWillMount() {\n    this.playerEventMap.forEach((event) => {\n      this[event.key] = this[event.key].bind(this)\n      this.player.addEventListener(event.type, this[event.key])\n    })\n  }\n\n  componentWillUnmount() {\n    this.playerEventMap.forEach((event) => {\n      this.player.removeEventListener(event.type, this[event.key])\n    })\n  }\n\n  render() {\n    return (\n      <div ref=\"element\" {...this.propsList} className={this.className}>\n        {this.textContent}\n        {this.children}\n      </div>\n    )\n  }\n}\n","import Component from \"./Component.js\"\n\nexport default class Container extends Component {\n  constructor(props, context) {\n    super(props, context)\n    this.state.components = []\n  }\n\n  // TODO: HACK! This is a hack to get around IE 9-10 not inheriting static properties.\n  //       Remove this when these browsers are dropped, along with similar code\n  //       in other classes that extend Component and Container.\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  get components() {\n    return this.state.components\n  }\n\n  addComponent(component) {\n    let components = this.state.components.slice()\n    if (component.key == null)\n      component.key = akamai.amp.Utils.createUID()\n    components.push(component)\n    this.setState({components})\n  }\n\n  removeComponent(component) {\n    let components = this.state.components.filter((item) => item != component)\n    this.setState({components})\n  }\n\n  clear() {\n    this.setState({components: []})\n  }\n\n  appendChild(element) {\n    let parent = this.dom\n    if (parent == null)\n      return\n    parent.appendChild(element)\n  }\n\n  removeChild(element) {\n    let parent = this.dom\n    if (parent == null)\n      return\n    parent.removeChild(element)\n  }\n\n  get children() {\n    return super.children.concat(this.state.components)\n  }\n}\n","import Component from \"./Component.js\"\n\nexport default class Control extends Component {\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-icon\")\n    this.classList.add(\"amp-control\")\n    this.mouseFocus = false\n    this.focused = false\n    this.state.altText = this.altText\n\n    this.bindHandlers([\"onMouseDown\", \"onMouseUp\", \"onFocus\", \"onBlur\", \"onKeyDown\", \"onClick\", \"onChange\"])\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  get aria() {\n    return {\n      \"aria-label\": this.title,\n      role: \"button\"\n    }\n  }\n\n  get propsList() {\n    const { altText, ...props } = super.propsList\n    props.className = this.className\n    props.tabIndex = \"0\"\n    props.onMouseDown = (event) => (this.props.onMouseDown || this.onMouseDown)(event)\n    props.onMouseUp = (event) => (this.props.onMouseUp || this.onMouseUp)(event)\n    props.onFocus = (event) => (this.props.onFocus || this.onFocus)(event)\n    props.onBlur = (event) => (this.props.onBlur || this.onBlur)(event)\n    props.onKeyDown = (event) => (this.props.onKeyDown || this.onKeyDown)(event)\n    props.onClick = (event) => (this.props.onClick || this.onClick)(event)\n\n    const aria = this.aria\n    for (let key in aria) {\n      props[key] = aria[key]\n    }\n\n    return props\n  }\n\n  get altText() {\n    return this.props.altText || this.state.altText\n  }\n\n  get title() {\n    return this.player.getLocalizedString(this.altText)\n  }\n\n  onMouseDown(event) {\n    this.mouseFocus = true\n  }\n\n  onMouseUp(event) {\n    this.mouseFocus = false\n  }\n\n  onFocus(event) {\n    if (this.mouseFocus == true)\n      return\n\n    this.focused = true\n    this.classList.update({\"amp-focus\": true})\n    //Hack to Prevent overflow hidden elemnts to scroll up on tabbing\n    this.player.viewComponent.scrollTop = 0\n  }\n\n  onBlur(event) {\n    if (this.mouseFocus == true)\n      return\n\n    this.focused = false\n    this.classList.update({\"amp-focus\": false})\n  }\n\n  onKeyDown(event) {\n    if (this.mouseFocus == true)\n      return\n\n    this.onKeyPress(event)\n\n    if (event.type == \"keypress\" && (event.keyCode == 13 || event.keyCode == 32))\n      this.onAction()\n  }\n\n  onAction() {\n    this.onClick()\n  }\n\n  onKeyPress(event) {\n\n  }\n\n  onClick(event) {\n\n  }\n\n  change(value) {\n    const onChange = this.propsList.onChange || this.onChange\n    if (typeof onChange != \"function\")\n      return\n    onChange(value)\n  }\n\n  render() {\n    return (\n      <button ref=\"element\" {...this.propsList} className={this.className}>\n        {this.textContent}\n        {this.children}\n      </button>\n    )\n  }\n}\n","import Control from \"./Control.js\"\n\nexport default class PanelControl extends Control {\n  constructor(props, context) {\n    super(props, context)\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  get propsList() {\n    const { panel, ...props } = super.propsList\n    return props\n  }\n\n  get panel() {\n    return this.plugin.refs[this.props.panel]\n  }\n\n  onClick() {\n    this.panel.toggle()\n  }\n\n  onKeyDown(event) {\n    this.panel.onKeyDown(event)\n  }\n}\n","import Control from \"./Control.js\"\n\nexport default class PlayPause extends Control {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-playpause\", true)\n    this.state.altText = \"MSG_PLAY\"\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  onplaying() {\n    this.setState({altText: \"MSG_PAUSE\"})\n  }\n\n  onpause() {\n    this.setState({altText: \"MSG_PLAY\"})\n  }\n\n  onended() {\n    this.setState({altText: \"MSG_REPLAY\"})\n  }\n\n  onClick() {\n    const player = this.player\n    switch (player.playState) {\n      case \"ended\":\n        this.plugin.replay()\n      break\n\n      case \"ready\":\n      case \"paused\":\n      \tplayer.play()\n      break\n\n      default:\n        player.pause()\n      break\n    }\n  }\n\n}\n","import Control from \"./Control.js\"\n\nexport default class PauseOverlay extends Control {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-pause-overlay\", true)\n    this.state.altText = \"MSG_PLAY\"\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  onClick() {\n    const player = this.player\n    switch (player.playState) {\n      case \"ended\":\n        this.plugin.replay()\n      break\n\n      default:\n          player.play()\n      break\n    }\n  }\n}\n","import Component from \"./Component.js\"\n\nexport default class BufferingOverlay extends Component {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-buffering-overlay\", true)\n    this.classList.add(\"amp-icon\")\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n}\n","export default class Utils {\n\n  /**\n   * Takes a time in seconds and converts it to timecode.\n   *\n   * @param   {Number}  time  The time in seconds to be formatted.\n   * @return  {String}  A SMTP formatted string.\n   */\n  static formatTimecode(time, duration) {\n    time = parseInt(time)\n    if (isNaN(time)) {\n      return \"00:00\"\n    }\n    var strTime = Utils.formatZeroFill(time % 60)\n    time = parseInt(time / 60)\n    strTime = Utils.formatZeroFill(time % 60) + \":\" + strTime\n    time = parseInt(time / 60)\n    if (time > 0) {\n      strTime = Utils.formatZeroFill(time) + \":\" + strTime\n    }\n    if (duration >= 3600 && strTime.length === 5) {\n      strTime = \"00:\" + strTime\n    }\n    return strTime\n  }\n\n\n  /**\n   * Converts a time in seconds to a string and adds a zero in front of any number lower than 10.\n   *\n   * @param {Number} time The number to be zero filled.\n   */\n  static formatZeroFill(time) {\n    var str = time.toString()\n    if (time < 10) {\n      str = \"0\" + str\n    }\n    return str\n  }\n\n  /**\n   * @param {Number} number\n   *    The number to be rounded.\n   *\n   * @param {Number} precision\n   *    The level of precision. Positive 1 would round to 1 decimal place and -1 would round to the tens.\n   *\n   * @return {Number}\n   *    The rounded number.\n   */\n  static round(number, precision) {\n    const factor = Math.pow(10, precision)\n    return Math.round(number * factor) / factor\n  }\n\n  static getEventPos(event) {\n    return {\n        x: (event.pageX - (window.scrollX || window.pageXOffset)) || (event.targetTouches[0].pageX - window.scrollX),\n        y: (event.pageY - (window.scrollY || window.pageYOffset)) || (event.targetTouches[0].pageY - window.scrollY)\n    }\n  }\n\n  static componentEnabled(plugin, component) {\n    const config = plugin.config[component]\n    return ((plugin.player[component] != null && plugin.player[component].enabled !== false) || (config != null && config !== false && config.enabled !== false && config.disabled !== true))\n  }\n\n  static isNumber(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n)\n  }\n}\n","import Component from \"./Component.js\"\nimport Utils from \"./Utils.js\"\n\nexport default class CurrentTime extends Component {\n\n  constructor(props, context) {\n    super(props, context)\n    this.state.currentTime = this.player.currentTime\n    this.state.duration = this.player.duration\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  onmediachange(event) {\n    this.setState({currentTime: 0})\n  }\n\n  ontimeupdate(event) {\n    this.setState({currentTime: Math.round(event.detail)})\n  }\n\n  onseeking() {\n    this.setState({currentTime: Math.round(this.player.currentTime)})\n  }\n\n  ondurationchange(event) {\n    this.setState({duration: Math.round(event.detail)})\n  }\n\n  render() {\n    return <span className=\"amp-current-time\">{Utils.formatTimecode(this.state.currentTime, this.state.duration)}</span>\n  }\n\n}\n","import Component from \"./Component.js\"\n\nexport default class Live extends Component {\n\n  constructor(props, context) {\n    super(props, context)\n    this.state.isLive = true\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n  \n  onislive(event) {\n    this.setState({isLive: event.detail})\n  }\n\n  liveClickHandler() {\n    if (!this.state.isLive)\n      this.player.goLive()\n  }\n\n  render() {\n    return <span ref=\"element\" className=\"amp-live-label\" onClick={this.liveClickHandler.bind(this)}>{this.getLocalizedString(this.state.isLive ? \"MSG_LIVE\" : \"MSG_GO_LIVE\")}</span>\n  }\n\n}\n","import Component from \"./Component.js\"\nimport Utils from \"./Utils.js\"\n\nexport default class Duration extends Component {\n\n  constructor(props, context) {\n    super(props, context)\n    this.state.duration = this.player.duration\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  onmediachange(event) {\n    this.setState({duration: Math.round(this.player.duration)})\n  }\n\n  ondurationchange(event) {\n    this.setState({duration: Math.round(event.detail)})\n  }\n\n  render() {\n    return <span className=\"amp-duration\">{Utils.formatTimecode(this.state.duration, this.state.duration)}</span>\n  }\n\n}\n","import Control from \"./Control.js\"\nimport Utils from \"./Utils.js\"\n\nexport default class Slider extends Control {\n\n  constructor(props, context) {\n    super(props, context)\n    this.state.percent = 0\n    this.state.value = 0\n    this.state.min = 0\n    this.state.range = 0\n    this.state.max = 1\n    this.state.dragging = false\n    this.increment = 0.1\n    this.classList.add(\"amp-slider\")\n\n    this.bindHandlers([\"onHandleMouseDown\", \"onHandleMouseUp\", \"onHandleMouseMove\"])\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  format(value) {\n    return value\n  }\n\n  update(values) {\n    if (values.percent == null && values.value != null)\n      values.percent = values.value / this.max\n\n    if (values.value == null && values.percent != null)\n      values.value = Math.round(values.percent * this.max)\n\n    if (values.valueText == null && values.value != null)\n      values.valueText = `${this.format(values.value)} ${this.getLocalizedString(\"MSG_OF\")} ${this.format(this.max)}`\n\n    // Handles NaN cases that cause unpredictable seek results\n    if (!Utils.isNumber(values.value))\n      delete values.value\n\n    if (!Utils.isNumber(values.percent))\n      delete values.percent\n\n    this.setState(values)\n    return values\n  }\n\n  set percent(value) {\n    value = akamai.amp.Utils.clamp(value, 0, 1)\n\n    if (this.percent == value)\n      return\n\n    this.change(this.update({percent: value}))\n  }\n\n  get percent() {\n    return this.state.percent\n  }\n\n  set value(value) {\n    value = akamai.amp.Utils.clamp(value, this.min, this.max)\n\n    if (this.value == value)\n      return\n\n    this.change(this.update({value}))\n  }\n\n  get value() {\n    return this.state.value\n  }\n\n  set range(value) {\n    value = akamai.amp.Utils.clamp(value, this.min, this.max)\n\n    if (this.range == value)\n      return\n\n    this.setState({range: value})\n  }\n\n  get range() {\n    return this.state.range\n  }\n\n  set min(value) {\n    if (this.min == value)\n      return\n\n    this.setState({min: value})\n  }\n\n  get min() {\n    return this.state.min\n  }\n\n  set max(value) {\n    if (this.max == value)\n      return\n\n    this.setState({max: value})\n  }\n\n  get max() {\n    return this.state.max\n  }\n\n  set dragging(value) {\n    if (this.dragging == value)\n      return\n\n    this.setState({dragging: value})\n    this.classList.update({\"amp-dragging\": value})\n    this.plugin.dragging = value\n  }\n\n  get dragging() {\n    return this.state.dragging\n  }\n\n  get markers() {\n    return this.refs.markers\n  }\n\n  get aria() {\n    return Object.assign(super.aria, {\n      role: \"slider\",\n      \"aria-valuemin\": this.state.min,\n      \"aria-valuemax\": Math.round(this.state.max),\n      \"aria-valuenow\": Math.round(this.state.value),\n      \"aria-valuetext\": this.state.valueText\n    })\n  }\n\n  move(event) {\n    const offset = this.refs.element.getBoundingClientRect()\n    const pos = Utils.getEventPos(event)\n    this.percent = (pos.x - offset.left) / offset.width\n  }\n\n  onClick(event) {\n  \tif(this.player.playState != \"ready\")\n    \tthis.move(event)\n  }\n\n  onAction() {\n\n  }\n\n  onKeyPress(event) {\n    const code = event.keyCode\n    // left arrow 37\n    // up arrow 38\n    // right arrow 39\n    // down arrow 40\n    if (code == 39 || code == 38) {\n      this.percent += this.increment\n    } else if (code == 37 || code == 40) {\n      this.percent -= this.increment\n    }\n  }\n\n  onHandleMouseDown(event) {\n    if (this.player.playState == \"ready\")\n      return\n\n    event.stopPropagation()\n    event.preventDefault()\n    this.dragging = true\n    window.addEventListener(\"mouseup\", this.onHandleMouseUp)\n    window.addEventListener(\"mousemove\", this.onHandleMouseMove)\n    window.addEventListener(\"touchend\", this.onHandleMouseUp)\n    window.addEventListener(\"touchmove\", this.onHandleMouseMove)\n  }\n\n  onHandleMouseMove(event) {\n    this.move(event)\n  }\n\n  onHandleMouseUp(event) {\n    event.stopPropagation()\n    event.preventDefault()\n    this.dragging = false\n    window.removeEventListener(\"mouseup\", this.onHandleMouseUp)\n    window.removeEventListener(\"mousemove\", this.onHandleMouseMove)\n    window.removeEventListener(\"touchend\", this.onHandleMouseUp)\n    window.removeEventListener(\"touchmove\", this.onHandleMouseMove)\n    this.change(this.update({value: this.value, percent: this.percent}))\n  }\n\n  render() {\n    const percent = `${Utils.round(this.percent * 100, 2)}%`\n    const range = `${Utils.round(this.range * 100, 2)}%`\n    return (\n      <div ref=\"element\" {...this.propsList} onMouseMove={this.onMouseMove}>\n        <div ref=\"track\" className=\"amp-track\"></div>\n        <div ref=\"range\" className=\"amp-range\" style={{width: range}}></div>\n        <div ref=\"value\" className=\"amp-value\" style={{width: percent}}></div>\n        {this.children}\n        <div ref=\"handle\" className=\"amp-handle\" style={{left: percent}} onMouseDown={this.onHandleMouseDown} onTouchStart={this.onHandleMouseDown}></div>\n      </div>\n    )\n  }\n\n}\n","import Container from \"./Container.js\"\nimport Slider from \"./Slider.js\"\nimport Utils from \"./Utils.js\"\n\nexport default class Progress extends Slider {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-progress\", true)\n    this.state.altText = \"MSG_SEEK\"\n    this.state.textVisible = \"visible\"\n    this.bindHandlers([\"onMouseMove\", \"onaddurationchange\", \"onadtimeupdate\", \"onaddurationchange\", \"onadmanagerloaded\"])\n    this.isTouch = akamai.amp.Utils.isTouch\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  get propsList() {\n    const props = super.propsList\n    props.onMouseMove = this.onMouseMove\n    return props\n  }\n\n  get markers() {\n    return this.refs.markers\n  }\n\n  format(value) {\n    return Utils.formatTimecode(value, this.max)\n  }\n\n  onready() {\n    const ads = this.player.ads\n    if (ads == null)\n      return\n    \n    ads.addEventListener(\"managerloaded\", this.onadmanagerloaded)\n    ads.addEventListener(\"breakend\", this.ondurationchange)\n    ads.addEventListener(\"timeupdate\", this.onadtimeupdate)\n    ads.addEventListener(\"durationchange\", this.onaddurationchange)\n  }\n\n  onmediachange() {\n    this.update({value: 0})\n    this.range = 0\n    const ads = this.player.ads\n  }\n\n  ontimeupdate() {\n    if (this.dragging)\n      return\n    this.update({value: this.player.currentTime})\n  }\n\n  onseeking() {\n    this.update({value: this.player.currentTime})\n  }\n\n  onprogress(event) {\n    this.range = event.detail\n  }\n\n  oncueschange(event) {\n    const cues = event.detail\n    const markers = this.markers\n\n    markers.clear()\n\n    if (cues == null || cues.length <= 0)\n      return\n\n    const duration = this.player.duration\n    cues.forEach((cue, index) => {\n      if (cue.startTime <= 0)\n        return\n      markers.addComponent(<div className=\"amp-marker\" style={{left: `${cue.startTime / duration * 100}%`}} key={index} />)\n    })\n  }\n\n  ondurationchange(event) {\n    this.increment = 10 / this.player.duration\n    this.max = this.player.duration\n    this.update({value: ((event.type == \"breakend\" && event.data.type == \"preroll\") ? 0 : this.player.currentTime)})\n  }\n  \n  onadmanagerloaded(event) {\n  \tconst ads = this.player.ads\n  }\n\n  onadtimeupdate(event) {\n  \tif(this.player.playState == \"ready\")\n  \t\treturn\n    this.update({value: event.detail})\n  }\n\n  onaddurationchange(event) {\n    this.max = event.detail.duration\n  }\n\n  onMouseMove(event) {\n    const offset = this.refs.element.getBoundingClientRect()\n    const pos = Utils.getEventPos(event)\n    const percent = (pos.x - offset.left) / offset.width\n    this.setState({textPercent: akamai.amp.Utils.clamp(Utils.round(percent, 4), 0, 1)})\n  }\n\n  onKeyPress(event) {\n    if ((this.player.ads && this.player.ads.inProgress) || this.player.playState == \"ready\") {\n      return\n    }\n    super.onKeyPress(event)\n  }\n\n  onHandleMouseDown(event) {\n    super.onHandleMouseDown(event)\n    if (this.isTouch)\n      this.setState({textVisible: \"visible\"})\n  }\n\n  onHandleMouseMove(event) {\n    super.onHandleMouseMove(event)\n    this.onMouseMove(event)\n  }\n\n  onHandleMouseUp(event) {\n    super.onHandleMouseUp(event)\n    if (this.isTouch)\n      this.setState({textVisible: \"hidden\"})\n  }\n\n  onChange(states) {\n    if (this.dragging)\n      return\n    this.player.currentTime = states.value\n  }\n\n  get children() {\n    const textPercent = `${this.state.textPercent * 100}%`\n    const minClampValue = this.refs.element ? ((this.refs.text.clientWidth/1.3)*100/this.refs.element.clientWidth) : 0\n    const maxClampValue = 100 - minClampValue\n    const textValue = `${akamai.amp.Utils.clamp(Utils.round(this.state.textPercent * 100, 2), minClampValue, maxClampValue)}%`\n\n    return (\n      <div>\n        <Container ref=\"markers\" className=\"amp-markers\"></Container>\n        <div ref=\"text\" className=\"amp-text\" style={{left: textValue, visibility: this.state.textVisible}}>{this.format(this.state.textPercent * this.player.duration)}</div>\n      </div>\n    )\n  }\n}\n","import Slider from \"./Slider.js\"\n\nexport default class Volume extends Slider {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-volume\", true)\n    this.state.min = 0\n    this.state.max = 100\n    this.state.percent = this.player.volume\n    this.state.value = this.player.volume * 100\n    this.state.altText = \"MSG_VOLUME\"\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  format(value) {\n    return Math.round(value)\n  }\n\n  onvolumechange(event) {\n    this.update({percent: event.detail})\n  }\n  \n  onClick(event) {\n    this.move(event)\n  }\n\n  onChange(value) {\n    this.player.volume = value.percent\n  }\n  \n  onHandleMouseDown(event) {\n    event.stopPropagation()\n    event.preventDefault()\n    this.dragging = true\n    window.addEventListener(\"mouseup\", this.onHandleMouseUp)\n    window.addEventListener(\"mousemove\", this.onHandleMouseMove)\n    window.addEventListener(\"touchend\", this.onHandleMouseUp)\n    window.addEventListener(\"touchmove\", this.onHandleMouseMove)\n  }\n\n  render() {\n    if (akamai.amp.Utils.isVolumeSettable() == false)\n      return null\n\n    return super.render()\n  }\n}\n","import Control from \"./Control.js\"\n\nexport default class Toggle extends Control {\n\n  constructor(props, context) {\n    super(props, context)\n    this.state.toggled = false\n    this.state.onlabel = \"\"\n    this.state.offlabel = \"\"\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  set toggled(value) {\n    if (value === this.state.toggled)\n      return value\n\n    this.setState({toggled: value})\n    this.change(value)\n  }\n\n  get toggled() {\n    return this.state.toggled\n  }\n\n  get propsList() {\n    const props = super.propsList\n    props[\"aria-checked\"] = this.state.toggled\n    props[\"role\"] = \"switch\"\n    return props\n  }\n\n  toggle() {\n    return this.toggled = !this.toggled\n  }\n\n  onClick(event) {\n    this.toggle()\n  }\n}\n","import Toggle from \"./Toggle.js\"\n\nexport default class Mute extends Toggle {\n\n  constructor(props, context) {\n    super(props, context)\n    this.state.level = \"\"\n    this.classList.add(\"amp-mute\", true)\n    this.state.altText = \"MSG_MUTE\"\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  get className() {\n    return `${super.className} ${this.state.level}`\n  }\n\n  onChange() {\n    const player = this.player\n    player.muted = !player.muted\n  }\n\n  onvolumechange() {\n    let level = \"\"\n\n    if (this.player.muted) {\n      level = \"amp-muted\"\n    } else if (this.player.volume < 0.5) {\n      level = \"amp-low\"\n    }\n\n    this.setState({level})\n  }\n\n  render() {\n    if (akamai.amp.Utils.isVolumeSettable() == false)\n      return null\n\n    return super.render()\n  }\n}\n","import Control from \"./Control.js\"\n\nexport default class Fullscreen extends Control {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-fullscreen\", true)\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  onfullscreenchange(event) {\n    const key = (event.detail) ? \"MSG_EXIT_FULLSCREEN\" : \"MSG_ENTER_FULLSCREEN\"\n    this.setState({altText: key})\n  }\n\n  onClick() {\n    if (this.player.displayState == \"normal\") {\n      this.player.enterFullScreen()\n    } else {\n      this.player.exitFullScreen()\n    }\n  }\n}\n","import PanelControl from \"./PanelControl.js\"\n\nexport default class SettingsButton extends PanelControl {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-settings\", true)\n    this.state.altText = \"MSG_SETTINGS\"\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n}\n","import Control from \"./Control.js\"\n\nexport default class ListItem extends Control {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-list-item\")\n    this.classList.remove(\"amp-icon\")\n    this.classList.remove(\"amp-control\")\n    this.state.direction = this.props.direction || \"none\"\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  focus() {\n    this.refs.element.focus()\n  }\n\n  onKeyDown(event) {\n    if (this.mouseFocus == true)\n      return\n    this.onKeyPress(event)\n    if (event.type == \"keydown\") {\n      //13, 32 space Enter\n      //37, 39 left and right arrow\n      //38, 40 up down\n      switch (event.keyCode) {\n        case 13:\n        case 32:\n          this.props.onClick(event) || this.onClick(event)\n          break\n        case 37:\n          if (this.state.direction === \"left\")\n            this.props.onClick(event) || this.onClick(event)\n          break\n        case 39:\n        if (this.state.direction === \"right\")\n          this.props.onClick(event) || this.onClick(event)\n          break\n        case 38:\n          this.element.previousElementSibling !== null && this.element.previousElementSibling.focus()\n          break\n        case 40:\n          this.element.nextElementSibling !== null && this.element.nextElementSibling.focus()\n          break\n      }\n\n      if ( ((event.keyCode == 9 || event.keyCode == 40) && (event.shiftKey == false) && this.element.nextElementSibling === null) ||\n           ((event.keyCode == 9 || event.keyCode == 38) && (event.shiftKey == true) && this.element.previousElementSibling === null) ||\n             event.keyCode == 27 ) {\n        let tabIndex\n        if(this.refs.element.parentNode.className.indexOf(\"share\") >=0 ) {\n          tabIndex = 4\n          this.plugin.refs.sharePanel.close()\n        }\n        else {\n          tabIndex = 2\n          this.plugin.refs.settingsPanel.close()\n        }\n        let tabable = document.getElementsByClassName(\"amp-control\")\n        setTimeout(() => { tabable[tabable.length - tabIndex].focus() }, 1);\n      }\n\n    }\n\n    event.stopPropagation()\n  }\n\n\n  render() {\n    return (\n      <div ref=\"element\" {...this.propsList} role=\"menuitem\">\n        {this.children}\n      </div>\n    )\n  }\n\n}\n","import Component from \"./Component.js\"\nimport ListItem from \"./ListItem.js\"\n\nexport default class Panel extends Component {\n\n  constructor(props, context) {\n    super(props, context)\n    this.closeHandler = this.closeHandler.bind(this)\n    this._open = false\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  set open(value) {\n    if (value == this._open)\n      return\n\n    this._open = value\n    this.classList.update({\"amp-open\": this._open})\n    this.plugin.open = value\n\n    if (this._open) {\n      document.addEventListener(\"click\", this.closeHandler)\n      this.context.plugin.activeState = \"active\"\n      this.context.plugin.stopActiveTimeout()\n      if (this.props.onopen)\n        this.props.onopen(this)\n    } else {\n      this.context.plugin.startActiveTimeout()\n      document.removeEventListener(\"click\", this.closeHandler)\n      if (this.props.onclose)\n        this.props.onclose(this)\n    }\n\n  }\n\n  get open() {\n    return this._open\n  }\n\n  get propsList() {\n    const { onclose, onopen, ...props } = super.propsList\n    return props\n  }\n\n  get title() {\n    return \"TITLE\"\n  }\n\n  closeHandler(event) {\n    if (this.element === undefined || this.element.contains(event.target))\n      return\n\n    this.open = false\n    document.removeEventListener(\"click\", this.closeHandler)\n  }\n\n  toggle() {\n    this.open = !this.open\n  }\n\n  close() {\n    this.open = false\n  }\n\n  isOptionSelected(item, index) {\n    return (index === this.state.activeIndex)\n  }\n\n  clickHandler(object, index) {\n    this.setState({activeIndex: index})\n  }\n\n  backHandler(event) {\n    this.props.gotoSettings(event)\n  }\n\n  render() {\n    const items = this.listOptions.map((object, index) => {\n      return <ListItem key={index} onClick={this.clickHandler.bind(this, object, index)}>\n              <button tabIndex=\"-1\" className={this.isOptionSelected(object, index) ? 'amp-icon amp-list-item-selected':'amp-icon'}></button>\n              <span>{object.label}</span>\n             </ListItem>\n    })\n\n    return <div ref=\"element\">\n            <ListItem className=\"amp-list-title\" onClick={this.backHandler.bind(this)} direction=\"left\">\n              <button tabIndex=\"-1\" className=\"amp-icon amp-icon-left\"></button>\n              <span>{this.state.title}</span>\n            </ListItem>\n            {items}\n           </div>\n  }\n}\n","import Panel from \"./Panel.js\"\n\nexport default class PanelMenu extends Panel {\n\n  constructor(props, context) {\n    super(props, context)\n    this.state.keyDown = false\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  onKeyDown(event) {\n    if (event.keyCode == 13 || event.keyCode == 32) {\n      this.state.keyDown = true\n      this.toggle()\n    }\n  }\n}\n","import Panel from \"../Panel.js\"\nimport ListItem from \"../ListItem.js\"\n\nexport default class Home extends Panel {\n\n  constructor(props, context) {\n    super(props, context)\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n\n  clickHandler(object, index) {\n    this.setState({activeIndex: index})\n    this.props.settingsChange({language: this.listOptions[index]})\n  }\n\n  render() {\n    this.listOptions = [{label:\"Off\", value: \"off\"}]\n    this.player.captioning.tracks.forEach((track) => {\n      const lang = track.language\n      this.listOptions.push({label: this.player.localization.getLanguageString(lang), value: lang})\n    })\n\n    const OptionsList = this.listOptions.map((object, index) => {\n      let selected = (!this.player.captioning.hidden && this.player.captioning.track && object.value == this.player.captioning.track.language)\n      if (this.player.captioning.hidden && index === 0) {\n        selected = true\n      }\n      return <ListItem key={index} onClick={this.clickHandler.bind(this, object, index)} >\n              <button className={selected ? 'amp-icon amp-list-item-selected':'amp-icon'} tabIndex=\"-1\"></button>\n              <span>{object.label}</span>\n             </ListItem>\n    })\n\n    return (\n      <div ref=\"element\" className=\"amp-captioning-home\">\n          <ListItem className=\"amp-list-highlight\" onClick={this.props.gotoSettings.bind(this)} direction=\"left\">\n            <button className=\"amp-icon amp-icon-left\" tabIndex=\"-1\"></button>\n            <span>Subtitles/CC</span>\n          </ListItem>\n          <ListItem onClick={(event)=>this.props.viewChange(event, \"options\")}  className=\"amp-option-button\" >Options</ListItem>\n        {OptionsList}\n      </div>\n    )\n  }\n}\n","import Panel from \"../Panel.js\"\nimport ListItem from \"../ListItem.js\"\n\nexport default class Options extends Panel {\n\n  constructor(props, context) {\n    super(props, context)\n    this.listOptions = [\n      {label: \"Font Family\", key: \"fontFamily\", value: \"Arial\"},\n      {label: \"Font Color\", key: \"fontColor\", value: \"Red\"},\n      {label: \"Font Size\", key: \"size\", value: \"100%\"},\n      {label: \"Font Opacity\", key: \"fontOpacity\", value: \"0%\"},\n      {label: \"Background Color\", key: \"backgroundColor\", value: \"Black\"},\n      {label: \"Background Opacity\", key: \"backgroundOpacity\", value: \"0%\"},\n      {label: \"Window Color\", key: \"windowColor\", value: \"Red\"},\n      {label: \"Window Opacity\", key: \"windowOpacity\", value: \"0%\"},\n      {label: \"Character Edge Style\", key: \"edgeType\", value: \"None\"},\n      {label: \"Edge Color\", key: \"edgeColor\", value: \"Red\"},\n      {label: \"Edge Opacity\", key: \"edgeOpacity\", value: \"Red\"},\n      {label: \"Scroll\", key: \"scroll\", value: \"Pop-out\"},\n    ]\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n\n  render() {\n    const OptionsList = this.listOptions.map((object, index) => {\n      return <ListItem key={object.key} onClick={(event)=>this.props.viewChange(event, object.key)} direction=\"right\">\n                <span className=\"amp-label\">{object.label}</span>\n                <button className=\"amp-icon amp-icon-right amp-right\" tabIndex=\"-1\"></button>\n                <span className=\"amp-right\">\n                  {this.props.captionsettings[object.key+\"Label\"]}\n                </span>\n             </ListItem>\n    })\n\n    return <div className=\"amp-captioning-options\">\n            <ListItem className=\"amp-list-title\" onClick={(event)=>this.props.viewChange(event, \"home\")} direction=\"left\">\n              <button className=\"amp-icon amp-icon-left\" tabIndex=\"-1\"></button>\n              <span>Options</span>\n            </ListItem>\n            {OptionsList}\n           </div>\n  }\n}\n","import Panel from \"../Panel.js\"\n\nexport default class OptionsPanel extends Panel {\n\n  constructor(props, context) {\n    super(props, context)\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n\n  select() {\n    const options = this.listOptions\n    const props = this.props.captionsettings\n    const len = options.length\n    for (let i = 0; i < len; i++) {\n      if ((/color/i.test(this.setting) && (options[i].value.r == props[this.setting].r) && (options[i].value.g == props[this.setting].g) && (options[i].value.b == props[this.setting].b)) ||\n          (/opacity/i.test(this.setting) && (options[i].value == props[this.setting.replace(\"Opacity\", \"Color\")].a)) ||\n          (!/opacity|color/i.test(this.setting) && options[i].value == props[this.setting])) {\n        this.state.activeIndex = i\n        break\n      }\n    }\n  }\n\n  clickHandler (object, index) {\n    super.clickHandler(object, index)\n    this.props.settingsChange({[this.setting]: object})\n  }\n\n  backHandler(event) {\n    this.props.viewChange(event, \"options\")\n  }\n}\n","export default class Color {\n\n  constructor(r, g, b, a = 1) {\n    if (typeof r == \"string\") {\n      const parts = r.match(/[0-9\\.]+/g)\n      r = parseInt(parts[0])\n      g = parseInt(parts[1])\n      b = parseInt(parts[2])\n      a = parts[3] != null ? parseFloat(parts[3]) : 1\n    }\n\n    this.r = r\n    this.g = g\n    this.b = b\n    this.a = a\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n\n  toString(radix) {\n    return `rgba(${this.r}, ${this.g}, ${this.b}, ${this.a})`\n  }\n}\n","import OptionsPanel from \"./OptionsPanel\"\nimport Color from \"./Color\"\n\nexport default class BackgroundColor extends OptionsPanel {\n\n  constructor(props, context) {\n    super(props, context)\n\n    this.state.title = \"Background Color\" // TODO: This needs to be localized\n    this.setting = \"backgroundColor\"\n    this.listOptions = props.labels[this.setting]\n    this.select()\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n}\n","import OptionsPanel from \"./OptionsPanel.js\"\n\nexport default class BackgroundOpacity extends OptionsPanel {\n\n  constructor(props, context) {\n    super(props, context)\n\n    this.state.title = \"Background Opacity\" // TODO: This needs to be localized\n    this.setting = \"backgroundOpacity\"\n    this.listOptions = props.labels[this.setting]\n    this.select()\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n}\n","import OptionsPanel from \"./OptionsPanel.js\"\n\nexport default class CharacterEdgeStyle extends OptionsPanel {\n\n  constructor(props, context) {\n    super(props, context)\n\n    this.state.title = \"Character Edge Style\" // TODO: This needs to be localized\n    this.setting = \"edgeType\"\n    this.listOptions = props.labels[this.setting]\n    this.select()\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n}\n","import OptionsPanel from \"./OptionsPanel\"\nimport Color from \"./Color\"\n\nexport default class FontColor extends OptionsPanel {\n\n  constructor(props, context) {\n    super(props, context)\n\n    this.state.title = \"Font Color\" // TODO: This needs to be localized\n    this.setting = \"fontColor\"\n    this.listOptions = props.labels[this.setting]\n    this.select()\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n}\n","import OptionsPanel from \"./OptionsPanel.js\"\n\nexport default class FontFamily extends OptionsPanel {\n\n  constructor(props, context) {\n    super(props, context)\n\n    this.state.title = \"Font Family\" // TODO: This needs to be localized\n    this.setting = \"fontFamily\"\n    this.listOptions = props.labels[this.setting]\n    this.select()\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n}\n","import OptionsPanel from \"./OptionsPanel.js\"\n\nexport default class FontOpacity extends OptionsPanel {\n\n  constructor(props, context) {\n    super(props, context)\n\n    this.state.title = \"Font Opacity\" // TODO: This needs to be localized\n    this.setting = \"fontOpacity\"\n    this.listOptions = props.labels[this.setting]\n    this.select()\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n\n}\n","import OptionsPanel from \"./OptionsPanel.js\"\n\nexport default class FontSize extends OptionsPanel {\n\n  constructor(props, context) {\n    super(props, context)\n\n    this.state.title = \"Font Size\" // TODO: This needs to be localized\n    this.setting = \"size\"\n    this.listOptions = props.labels[this.setting]\n    this.select()\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n}\n","import OptionsPanel from \"./OptionsPanel\"\nimport Color from \"./Color\"\n\nexport default class WindowColor extends OptionsPanel {\n\n  constructor(props, context) {\n    super(props, context)\n\n    this.state.title = \"Window Color\" // TODO: This needs to be localized\n    this.setting = \"windowColor\"\n    this.listOptions = props.labels[this.setting]\n    this.select()\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n}\n","import OptionsPanel from \"./OptionsPanel.js\"\n\nexport default class WindowOpacity extends OptionsPanel {\n\n  constructor(props, context) {\n    super(props, context)\n\n    this.state.title = \"Window Opacity\" // TODO: This needs to be localized\n    this.setting = \"windowOpacity\"\n    this.listOptions = props.labels[this.setting]\n    this.select()\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n}\n","import OptionsPanel from \"./OptionsPanel.js\"\n\nexport default class ScrollType extends OptionsPanel {\n\n  constructor(props, context) {\n    super(props, context)\n\n    this.state.title = \"Scroll Type\" // TODO: This needs to be localized\n    this.setting = \"scroll\"\n    this.listOptions = props.labels[this.setting]\n    this.select()\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n}\n","import OptionsPanel from \"./OptionsPanel\"\nimport Color from \"./Color\"\n\nexport default class EdgeColor extends OptionsPanel {\n\n  constructor(props, context) {\n    super(props, context)\n\n    this.state.title = \"Edge Color\" // TODO: This needs to be localized\n    this.setting = \"edgeColor\"\n    this.listOptions = props.labels[this.setting]\n    this.select()\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n}\n","import OptionsPanel from \"./OptionsPanel.js\"\n\nexport default class EdgeOpacity extends OptionsPanel {\n\n  constructor(props, context) {\n    super(props, context)\n\n    this.state.title = \"Edge Opacity\" // TODO: This needs to be localized\n    this.setting = \"edgeOpacity\"\n    this.listOptions = props.labels[this.setting]\n    this.select()\n  }\n  \n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n}\n","import Color from \"./captionsettings/Color\"\n\nexport default class CaptionData {\n\n  constructor() {\n    return {\n      fontFamily: [\n        {label: \"Monospaced Serif\", value: \"'Courier New', Courier, 'Nimbus Mono L', 'Cutive Mono', monospace\"},\n        {label: \"Proportional Serif\", value: \"'Times New Roman', Times, Georgia, Cambria, 'PT Serif Caption', serif\"},\n        {label: \"Monospaced Sans-Serif\", value: \"'Deja Vu Sans Mono', 'Lucida Console', Monaco, Consolas, 'PT Mono', monospace\"},\n        {label: \"Proportional Sans-Serif\", value: \"Roboto, 'Arial Unicode Ms', Arial, Helvetica, Verdana, 'PT Sans Caption', sans-serif\"},\n        {label: \"Casual\", value: \"'Comic Sans MS', Impact, Handlee, fantasy\"},\n        {label: \"Cursive\", value: \"'Monotype Corsiva', 'URW Chancery L', 'Apple Chancery', 'Dancing Script', cursive\"},\n        {label: \"Small Capitals\", value: \"'Arial Unicode Ms', Arial, Helvetica, Verdana, 'Marcellus SC', sans-serif; font-variant: small-caps\"}\n      ],\n      fontColor: [\n        {label: \"White\", value: new Color(255, 255, 255)},\n        {label: \"Yellow\", value: new Color(255, 255, 0)},\n        {label: \"Green\", value: new Color(0, 128, 0)},\n        {label: \"Cyan\", value: new Color(0, 255, 255)},\n        {label: \"Blue\", value: new Color(0, 0, 255)},\n        {label: \"Magenta\", value: new Color(255, 0, 255)},\n        {label: \"Red\", value: new Color(255, 0, 0)},\n        {label: \"Black\", value: new Color(0, 0, 0)}\n      ],\n      size: [\n        {label: \"70%\", value: \"x-small\"},\n        {label: \"100%\", value: \"small\"},\n        {label: \"150%\", value: \"medium\"},\n        {label: \"200%\", value: \"large\"},\n        {label: \"300%\", value: \"x-large\"}\n      ],\n      fontOpacity: [\n        {label: \"25%\", value: 0.25},\n        {label: \"50%\", value: 0.5},\n        {label: \"75%\", value: 0.75},\n        {label: \"100%\", value: 1}\n      ],\n      backgroundColor: [\n        {label: \"White\", value: new Color(255,255,255)},\n        {label: \"Yellow\", value: new Color(255,255,0)},\n        {label: \"Green\", value: new Color(0,128,0)},\n        {label: \"Cyan\", value: new Color(0,255,255)},\n        {label: \"Blue\", value: new Color(0,0,255)},\n        {label: \"Magenta\", value: new Color(255,0,255)},\n        {label: \"Red\", value: new Color(255,0,0)},\n        {label: \"Black\", value: new Color(0,0,0)}\n      ],\n      backgroundOpacity: [\n        {label: \"0%\", value: 0},\n        {label: \"25%\", value: 0.25},\n        {label: \"50%\", value: 0.5},\n        {label: \"75%\", value: 0.75},\n        {label: \"100%\", value: 1}\n      ],\n      edgeType: [\n        {label: \"None\", value: \"text-shadow: 0px 0px 0px\"},\n        {label: \"Depressed\", value: \"text-shadow: 0px 1px 0px\"},\n        {label: \"Left Drop Shadow\", value: \"text-shadow: -3px 3px 2px\"},\n        {label: \"Raised\", value: \"text-shadow: 0px 1px 1px\"},\n        {label: \"Right Drop Shadow\", value: \"text-shadow: 3px 3px 2px\"},\n        {label: \"Uniform\", value: \"text-shadow: 0px 0px 4px\"}\n      ],\n      edgeColor: [\n        {label: \"White\", value: new Color(255, 255, 255)},\n        {label: \"Yellow\", value: new Color(255, 255, 0)},\n        {label: \"Green\", value: new Color(0, 128, 0)},\n        {label: \"Cyan\", value: new Color(0, 255, 255)},\n        {label: \"Blue\", value: new Color(0, 0, 255)},\n        {label: \"Magenta\", value: new Color(255, 0, 255)},\n        {label: \"Red\", value: new Color(255, 0, 0)},\n        {label: \"Black\", value: new Color(0, 0, 0)}\n      ],\n      edgeOpacity: [\n        {label: \"0%\", value: 0},\n        {label: \"25%\", value: 0.25},\n        {label: \"50%\", value: 0.5},\n        {label: \"75%\", value: 0.75},\n        {label: \"100%\", value: 1}\n      ],\n      fontOpacity: [\n        {label: \"25%\", value: 0.25},\n        {label: \"50%\", value: 0.5},\n        {label: \"75%\", value: 0.75},\n        {label: \"100%\", value: 1}\n      ],\n      scroll: [\n        {label: \"Pop-out\", value: \"popout\"},\n        {label: \"Roll-on\", value: \"rollon\"},\n        {label: \"Paint-on\", value: \"painton\"}\n      ],\n      windowColor: [\n        {label: \"White\", value: new Color(255, 255, 255)},\n        {label: \"Yellow\", value: new Color(255, 255, 0)},\n        {label: \"Green\", value: new Color(0, 128, 0)},\n        {label: \"Cyan\", value: new Color(0, 255, 255)},\n        {label: \"Blue\", value: new Color(0, 0, 255)},\n        {label: \"Magenta\", value: new Color(255, 0, 255)},\n        {label: \"Red\", value: new Color(255, 0, 0)},\n        {label: \"Black\", value: new Color(0, 0, 0)}\n      ],\n      windowOpacity: [\n        {label: \"0%\", value: 0},\n        {label: \"25%\", value: 0.25},\n        {label: \"50%\", value: 0.5},\n        {label: \"75%\", value: 0.75},\n        {label: \"100%\", value: 1}\n      ]\n    }\n  }\n}\n","import Panel from \"./Panel.js\"\nimport Home from \"./captionsettings/Home\"\nimport Options from \"./captionsettings/Options\"\nimport BackgroundColor from \"./captionsettings/BackgroundColor\"\nimport BackgroundOpacity from \"./captionsettings/BackgroundOpacity\"\nimport CharacterEdgeStyle from \"./captionsettings/CharacterEdgeStyle\"\nimport FontColor from \"./captionsettings/FontColor\"\nimport FontFamily from \"./captionsettings/FontFamily\"\nimport FontOpacity from \"./captionsettings/FontOpacity\"\nimport FontSize from \"./captionsettings/FontSize\"\nimport WindowColor from \"./captionsettings/WindowColor\"\nimport WindowOpacity from \"./captionsettings/WindowOpacity\"\nimport ScrollType from \"./captionsettings/ScrollType\"\nimport EdgeColor from \"./captionsettings/EdgeColor\"\nimport EdgeOpacity from \"./captionsettings/EdgeOpacity\"\nimport Color from \"./captionsettings/Color\"\nimport CaptionData from \"./CaptionData\"\n\nexport default class CaptionSettings extends Panel {\n\n  constructor(props, context) {\n    super(props, context)\n    this.state.languages = []\n    this.state.keyDown = false\n\n    const settings = Object.assign({}, this.player.settings.captions)\n    delete settings.track\n\n    for (let key in settings) {\n      if (/Color$/.test(key)) {\n        settings[key] = new Color(settings[key])\n        settings[key.replace(\"Color\", \"Opacity\")] = settings[key].a\n      }\n    }\n    this.state.captionsettings = settings\n\n    this.state.viewChange = this.changeView.bind(this)\n    this.state.settingsChange = this.changeSettings.bind(this)\n    this.state.level = \"home\"\n\n    this.state.labels = new CaptionData()\n\n    this.initSettingLabels()\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  componentWillMount() {\n    this.open = true\n  }\n\n  focus(event) {\n    this.refs.element.firstChild.children[2].focus()\n  }\n\n  changeView(event, toState) {\n    if (/keydown/.test(event.type) && (event.keyCode == 13 || event.keyCode == 32 || event.keyCode == 37 || event.keyCode == 39)) {\n      this.keyDown = true\n    }\n    setTimeout(() => { this.setState({level: toState}) }, 100)\n  }\n\n  initSettingLabels() {\n    for (let key in this.state.labels) {\n      this.state.labels[key].forEach((item) => {\n        if ((/color/i.test(key) && (item.value.r == this.state.captionsettings[key].r && item.value.g == this.state.captionsettings[key].g && item.value.b == this.state.captionsettings[key].b)) ||\n            (/opacity/i.test(key) && (item.value == this.state.captionsettings[key.replace(\"Opacity\", \"Color\")].a)) ||\n            (this.state.captionsettings[key] == item.value)) {\n              this.state.captionsettings[`${key}Label`] = item.label\n            }\n      })\n    }\n  }\n\n  changeSettings(object) {\n    for (var key in object) {\n      let setting = object[key]\n      let value = setting.value\n      switch (key) {\n        case \"language\":\n          const hidden = (setting.value == \"off\")\n          if (!hidden)\n            this.player.captioning.selectTrackByLanguage(setting.value)\n          this.player.captioning.hidden = hidden\n        break\n\n        case \"backgroundColor\":\n        case \"windowColor\":\n        case \"fontColor\":\n        case \"edgeColor\":\n          value.a = this.state.captionsettings[key].a\n        break\n\n        case \"backgroundOpacity\":\n        case \"fontOpacity\":\n        case \"windowOpacity\":\n        case \"edgeOpacity\":\n          let color = this.state.captionsettings[key.replace(\"Opacity\", \"Color\")]\n          color.a = value\n          value = color\n        break\n\n      }\n      this.state.captionsettings[key.replace(\"Opacity\", \"Color\")] = value\n      this.state.captionsettings[`${key}Label`] = setting.label\n    }\n\n    let settings = Object.assign({}, this.state.captionsettings)\n    for (let key in settings) {\n      if (/Label$/.test(key) || /Opacity$/.test(key) || /language/.test(key)) {\n        delete settings[key]\n      }\n      else if (/Color$/.test(key)) {\n        settings[key] = settings[key].toString()\n      }\n    }\n    settings.visible = !this.player.captioning.hidden\n    this.player.captioning.changeSettings(settings)\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.keyDown) {\n      this.refs.element.firstChild.children[1].focus()\n      this.keyDown = false\n    }\n  }\n\n  getCurrentPage() {\n\n    switch (this.state.level) {\n      case \"home\":\n        return <Home {...this.state} gotoSettings={this.props.gotoSettings.bind(this)}/>\n        break\n      case \"options\":\n        return <Options {...this.state}/>\n        break\n      case \"fontFamily\":\n        return <FontFamily {...this.state}/>\n        break\n      case \"fontColor\":\n        return <FontColor {...this.state}/>\n        break\n      case \"size\":\n        return <FontSize {...this.state}/>\n        break\n      case \"fontOpacity\":\n        return <FontOpacity {...this.state}/>\n        break\n      case \"backgroundColor\":\n        return <BackgroundColor {...this.state}/>\n        break\n      case \"backgroundOpacity\":\n        return <BackgroundOpacity {...this.state}/>\n        break\n      case \"windowColor\":\n        return <WindowColor {...this.state}/>\n        break\n      case \"windowOpacity\":\n        return <WindowOpacity {...this.state}/>\n        break\n      case \"edgeType\":\n        return <CharacterEdgeStyle {...this.state}/>\n        break\n      case \"edgeColor\":\n        return <EdgeColor {...this.state}/>\n        break\n      case \"edgeOpacity\":\n        return <EdgeOpacity {...this.state}/>\n        break\n      case \"scroll\":\n        return <ScrollType {...this.state}/>\n    }\n  }\n\n  render() {\n    return <div ref=\"element\" role=\"menu\">{this.getCurrentPage()}</div>\n  }\n}\n","import Panel from \"./Panel.js\"\n\nexport default class Quality extends Panel {\n\n  constructor(props, context) {\n    super(props, context)\n    this.listOptions = [\n      { label: \"Auto\", value: \"0.25\" } // TODO: Auto needs to be localized\n    ]\n    this.qualityLevels = []\n    this.state.title = \"Quality\" // TODO: This needs to be localized\n    this.state.activeIndex = -1\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  componentWillMount() {\n    super.componentWillMount()\n    this.onqualitylevelsloaded({detail: this.player.qualityLevels})\n    this.onqualitychanging({detail: this.player.qualityLevels[this.player.quality]})\n    this.open = true\n  }\n\n  clickHandler(object, index) {\n    this.player.quality = index - 1\n    if (!index)\n      this.onqualitychanging()\n  }\n\n  onqualitylevelsloaded(event) {\n    this.qualityLevels = event.detail\n    this.qualityLevels.forEach((item) => {\n      this.listOptions.push({\"label\": `${Math.round(item.bitrate / 1000)} Kbps`})\n    })\n    this.setState({redraw: true})\n  }\n\n  onqualitychanging(event) {\n    let index = -1, autoLevel = false\n    try {\n      autoLevel = this.player.qualityMode\n      index = autoLevel == \"auto\" ? -1 : (event.detail ? this.qualityLevels.findIndex(levelObject => levelObject.qualityIndex == event.detail.qualityIndex && levelObject.level == event.detail.level) : this.props.quality.quality)\n    } catch (e) {}\n\n    this.setState({activeIndex: index})\n  }\n\n  isOptionSelected(item, index) {\n    return (index - 1 === this.state.activeIndex)\n  }\n}\n","import Panel from \"./Panel.js\"\n\nexport default class PlaybackRate extends Panel {\n\n  constructor(props, context) {\n    super(props, context)\n    this.state.title = \"Speed\" // TODO: This needs to be localized\n    this.listOptions = [\n      { label: \"0.25\", value: 0.25 },\n      { label: \"0.5\", value: 0.5 },\n      { label: \"Normal\", value: 1 },\n      { label: \"1.25\", value: 1.25 },\n      { label: \"1.5\", value: 1.5 },\n      { label: \"2\", value: 2 }\n    ]\n\n    this.state.activeIndex = 2\n    this.listOptions.forEach((option, index) => {\n      if (option.value == this.player.playbackRate) {\n        this.state.activeIndex = index\n      }\n    })\n    this.classList.add(\"amp-playback-rate\")\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  clickHandler(object, index) {\n    this.player.playbackRate = object.value\n    super.clickHandler(object, index)\n  }\n\n  isOptionSelected(item, index) {\n    return (parseFloat(item.value) === parseFloat(this.player.playbackRate))\n  }\n}\n","import Panel from \"./Panel.js\"\n\nexport default class AudioTracks extends Panel {\n\n  constructor(props, context) {\n    super(props, context)\n    this.listOptions = []\n    this.audioTracks = []\n    this.activeIds = []\n    this.state.title = \"Audio\" // TODO: Should be localized\n    this.state.activeIndex = -1\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  componentWillMount() {\n    super.componentWillMount()\n    this.audioTracks = this.player.audioTracks\n    this.oncanplaythrough({detail: this.audioTracks})\n    this.open = true\n  }\n\n  clickHandler(object, index) {\n    this.player.audioTracks[index].enabled = true\n    this.setState({activeIndex: index-1})\n    this.setState({redraw: true})\n  }\n\n  onmediachange(event) {\n  \tthis.listOptions = []\n  \tthis.activeIds = []\n  }\n\n  oncanplaythrough(event) {\n  \tthis.audioTracks = this.player.audioTracks\n    this.audioTracks.forEach((item) => {\n      if (this.activeIds[item.id] == null) {\n        const lang = this.player.localization.getLanguageString(item.language) || item.language\n      \tconst label = item.label || lang || item.id || this.player.localization.getString(\"MSG_UNKNOWN\")\n        this.activeIds[item.id] = true\n        this.listOptions.push({label})\n      }\n    })\n    this.setState({redraw: true})\n  }\n\n  isOptionSelected(item, index) {\n    return this.player.audioTracks[index].enabled\n  }\n}\n","import PanelMenu from \"./PanelMenu.js\"\nimport CaptionSettings from \"./CaptionSettings.js\"\nimport Quality from \"./Quality.js\"\nimport PlaybackRate from \"./PlaybackRate.js\"\nimport AudioTracks from \"./AudioTracks.js\"\nimport ListItem from \"./ListItem.js\"\nimport Utils from \"./Utils.js\"\n\nexport default class SettingsPanel extends PanelMenu {\n\n  constructor(props, context) {\n    super(props, context)\n    this.state.settingsLevel = 0\n    this.state.bitrateLabel = \"Auto\"\n    this.state.captioningSettingState = null\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  onready(event) {\n    this.setState({\"autoplay\": this.player.autoplay})\n  }\n\n  onseeked(event) {\n  \tthis.open = false\n  }\n\n  toggle() {\n    super.toggle()\n    this.state.settingsLevel = 0\n  }\n\n  onqualitychanging(event) {\n    let brLabel = this.player.qualityMode === \"auto\" ? \"Auto\" : (Math.round(event.detail.bitrate / 1000) + \"Kbps\") // TODO: Needs to be localized\n    this.state.quality = this.state.qualityLevels ? this.state.qualityLevels.findIndex(levelObject => levelObject.qualityIndex == event.detail.qualityIndex && levelObject.level == event.detail.level) : -1\n    this.setState({bitrateLabel: brLabel})\n  }\n\n  changeState(value, event) {\n    if (event.type == \"keydown\" && (event.keyCode == 13 || event.keyCode == 32 || event.keyCode == 37 || event.keyCode == 38 || event.keyCode == 39 || event.keyCode == 40) && this.mouseFocus != true) {\n      if (event.keyCode == 37 && this.state.settingsLevel == 0)\n        return\n      this.state.keyDown = true\n    }\n    setTimeout(() => { this.setState({settingsLevel:value});}, 100)\n  }\n\n  autoplayToggle() {\n    this.setState({\"autoplay\": (this.player.autoplay = !this.player.autoplay)})\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    if(nextState.settingsLevel == 1 && this.refs.firstElem.state.captionsettings)\n      this.setState({'captioningSettingState': this.refs.firstElem.state.captionsettings})\n    else if ((this.refs.firstElem != null) && !isNaN(this.refs.firstElem.state.activeIndex))\n      this.setState({'playbackSettingState': this.refs.firstElem.state.activeIndex})\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.keyDown) {\n      if (typeof this.refs.firstElem.focus === \"function\") {\n        this.refs.firstElem.focus()\n      }\n      else {\n        this.refs.firstElem.refs.element.childNodes[1].focus()\n      }\n      this.state.keyDown = false\n    }\n  }\n\n  currentAudioTrackLabel () {\n    let audioTracks = this.player.audioTracks\n    for (var i=0; i<audioTracks.length; i++) {\n      let item = audioTracks[i]\n      if ( item != null && item.enabled) {\n        const lang = this.player.localization.getLanguageString(item.language) || item.language\n      \tconst label = item.label || lang || item.id || this.player.localization.getString(\"MSG_UNKNOWN\")\n        return label\n        console.log(\"xxxx\")\n      }\n    }\n    return \"\"\n  }\n\n  render() {\n    switch (this.state.settingsLevel) {\n      case 0:\n        const isCaptionEnabled = Utils.componentEnabled(this.plugin, \"captioning\")\n        const isQualityEnabled = this.player.qualityLevels != null && this.player.qualityLevels.length > 1\n        const audioTracksAvailable = this.player.audioTracks != null && this.player.audioTracks.length > 1\n        let qualityRef, playbackRef\n        if (!isCaptionEnabled && isQualityEnabled)\n          qualityRef = \"firstElem\"\n        else if (!isCaptionEnabled && !isQualityEnabled)\n          playbackRef = \"firstElem\"\n\n        return (<div ref=\"element\" {...this.propsList} className={`amp-settings amp-panel ${this.className}`} role=\"menu\">\n                { isCaptionEnabled &&\n                  <ListItem ref=\"firstElem\" className=\"amp-subtitles\" onClick={this.changeState.bind(this, 1)} direction=\"right\">\n                    <span className=\"amp-label\">Subtitles</span>\n                    <button className=\"amp-icon amp-icon-right amp-right\" tabIndex=\"-1\"></button>\n                    <span className=\"amp-right\">{this.player.captioning.hidden ? \"Off\": this.player.localization.getLanguageString(this.player.captioning.track.language)}</span>\n                  </ListItem>\n                }\n                { isQualityEnabled &&\n                  <ListItem ref={qualityRef} onClick={this.changeState.bind(this, 2)} direction=\"right\">\n                    <span className=\"amp-label\">Quality</span>\n                    <button className=\"amp-icon amp-icon-right amp-right\" tabIndex=\"-1\"></button>\n                    <span className=\"amp-right\">{this.state.bitrateLabel}</span>\n                  </ListItem>\n                }\n                { this.player.mode != \"flash\" &&\n                  <ListItem ref={playbackRef} className=\"amp-playback-rate-button\" onClick={this.changeState.bind(this, 3)} direction=\"right\">\n                    <span className=\"amp-label\">Speed</span>\n                    <button className=\"amp-icon amp-icon-right amp-right\" tabIndex=\"-1\"></button>\n                    <span className=\"amp-right\">{this.player.playbackRate === 1 ? 'Normal' : this.player.playbackRate}</span>\n                  </ListItem>\n                }\n                { audioTracksAvailable &&\n                  <ListItem ref=\"audiotracks\" className=\"amp-playback-rate-button\" direction=\"right\" onClick={this.changeState.bind(this, 4)}>\n                    <span className=\"amp-label\">Audio</span>\n                    <button className=\"amp-icon amp-icon-right amp-right\" tabIndex=\"-1\"></button>\n                    <span className=\"amp-right\">{this.currentAudioTrackLabel()}</span>\n                  </ListItem>\n                }\n                {\n                  <ListItem ref=\"autoplay\" className={this.state.autoplay?\"amp-autoplay-on\":\"amp-autoplay-off\"} direction=\"right\" onClick={this.autoplayToggle.bind(this)}>\n                    <span className=\"amp-label\">Autoplay</span>\n                    <button className=\"amp-right amp-icon amp-toggle\"></button>\n                  </ListItem>\n                }\n               </div>)\n        break\n      case 1:\n        return (<div ref=\"element\" className={`amp-captioning-settings amp-panel ${this.className}`}>\n                  <CaptionSettings ref=\"firstElem\" captionState={this.state.captioningSettingState} gotoSettings={this.changeState.bind(this,0)}/>\n                </div>)\n        break\n      case 2:\n        return (<div ref=\"element\" className={`amp-bitrate amp-panel ${this.className}`}>\n                  <Quality ref=\"firstElem\" gotoSettings={this.changeState.bind(this,0)} />\n                </div>)\n        break\n      case 3:\n        return (<div ref=\"element\" className={`amp-playback-rate amp-panel ${this.className}`}>\n                  <PlaybackRate ref=\"firstElem\" gotoSettings={this.changeState.bind(this,0)} />\n                </div>)\n        break\n      case 4:\n        return (<div ref=\"element\" className={`amp-audio-tracks amp-panel ${this.className}`}>\n                  <AudioTracks ref=\"firstElem\" gotoSettings={this.changeState.bind(this,0)} />\n                </div>)\n        break\n    }\n\n  }\n}\n","import PanelControl from \"./PanelControl.js\"\nimport Utils from \"./Utils.js\"\n\nexport default class ShareButton extends PanelControl {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-share\", true)\n    this.state.altText = \"MSG_SHARE\"\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n}\n","import PanelMenu from \"./PanelMenu.js\"\nimport ListItem from \"./ListItem.js\"\nimport Utils from \"./Utils.js\"\n\nexport default class SharePanel extends PanelMenu {\n\n  constructor(props, context) {\n    super(props, context)\n    this.listOptions = [\n       {label: \"Facebook\", id: \"facebook\", url: \"www.facebook.html\"},\n       {label: \"Twitter\", id: \"twitter\", url: \"www.twitter.com\"},\n       {label: \"Email\", id: \"email\", url: \"\"},\n       {label: \"Embed\", id: \"embed\", url: \"\"}\n     ]\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  clickHandler(object, index, event) {\n    const media = this.player.media\n    this.player.dispatch(\"share\", {provider: object, link: media.link, embed: media.embed})\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.keyDown) {\n      this.refs.element.childNodes[0].focus()\n      this.state.keyDown = false\n    }\n  }\n\n  render() {\n    const OptionsList = this.listOptions.map((object,index) => {\n      return <ListItem key={index}  className=\"amp-list-item\" onClick={this.clickHandler.bind(this, object, index)}>\n              <button className={`amp-icon amp-${object.id}`} tabIndex=\"-1\"></button>\n              <span>{object.label}</span>\n             </ListItem>\n    });\n\n    return <div ref=\"element\" className={`amp-share amp-panel ${this.className}`}>\n            {OptionsList}\n           </div>\n  }\n}\n","import Toggle from \"./Toggle.js\"\nimport Utils from \"./Utils.js\"\n\nexport default class CaptionToggleButton extends Toggle {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-cc\")\n    this.state.altText = \"MSG_CLOSED_CAPTIONING\"\n    this.state.toggled = this.player.captioning ? !this.player.captioning.hidden : false\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  onmediachange() {\n    setTimeout(this.forceUpdate.bind(this), 1)\n  }\n\n  onChange(event) {\n    this.player.captioning.hidden = !this.player.captioning.hidden\n  }\n\n  render() {\n    if (!Utils.componentEnabled(this.plugin, \"captioning\"))\n      return null\n\n    return super.render()\n  }\n}\n","import Control from \"./Control.js\"\n\nexport default class JumpBack extends Control {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-jump-back\", true)\n    this.state.altText = \"MSG_JUMP_BACK\"\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  onClick() {\n    const player = this.player\n    if (player.playState === \"playing\" || player.playState === \"paused\") {\n      this.player.currentTime = Math.max(this.player.currentTime - 10, 0)\n    }\n    else if (player.ended === true) {\n      this.player.replay()\n    }\n  }\n\n}\n","import Control from \"./Control.js\"\n\nexport default class JumpForward extends Control {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-jump-forward\", true)\n    this.state.altText = \"MSG_JUMP_AHEAD\"\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  onClick(event) {\n  \tconst player = this.player\n    if (!player.ended && (player.playState == \"playing\" || player.playState == \"paused\")) {\n      player.currentTime = Math.min(this.player.currentTime + 10, this.player.duration - 1)\n    }\n  }\n\n}\n","import Component from \"./Component.js\"\n\nexport default class Poster extends Component {\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  onmediachange(event) {\n    this.setState({src: this.player.media.poster})\n  }\n\n  render() {\n    return (\n      <img className=\"amp-poster\" src={this.state.src} />\n    )\n  }\n}\n","import Component from \"./Component.js\"\n\nexport default class Title extends Component {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-title\", true)\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  onmediachange(event) {\n    this.setState({textContent: this.player.media.title})\n  }\n}\n","import Component from \"./Component.js\"\n\nexport default class ErrorMsg extends Component {\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n  \n  onerror(event) {\n    this.setState({error: this.l10n.MSG_ERROR_DEFAULT})\n  }\n\n  render() {\n    return (\n      <div className=\"amp-error-msg\">\n        <div dangerouslySetInnerHTML={{__html: this.state.error}} />\n      </div>\n    )\n  }\n}\n","import Component from \"./Component.js\"\n\nexport default class ContextMenu extends Component {\n\n  constructor(props, context) {\n    super(props, context)\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  render() {\n    const menuItems = [\n      <li className=\"amp-context-item amp-bold\" key=\"0\">Akamai Adaptive Media Player</li>,\n      <li className=\"amp-context-item\" key=\"1\">{this.player.version}</li>\n    ]\n\n    if ((typeof akamaiGetViewerId == \"function\") && (akamaiGetViewerId() != null))\n      menuItems.push(<li className=\"amp-context-item amp-selectable\" key=\"2\">Viewer ID: {akamaiGetViewerId()}</li>)\n\n    const style = {\n      top: `${this.props.y}px`,\n      left: `${this.props.x}px`\n    }\n\n    return (\n      <ul ref=\"element\" className=\"amp-context-menu\" style={style}>\n        {menuItems}\n      </ul>\n    )\n  }\n}\n","import Component from \"./Component.js\"\nimport Utils from \"./Utils.js\"\n\nexport default class Ads extends Component {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-ads\", true)\n    this.state.msg = \"\"\n    this.state.time = \"\"\n    this.bindHandlers([\"onadbreakstart\", \"onadbreakend\", \"onadstarted\", \"onadtimeremaining\", \"onadimpression\"])\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  get container() {\n    return this.refs.container\n  }\n\n  onready() {\n    this.controlsMode = this.plugin.mode\n    const ads = this.player.ads\n    if (ads == null)\n      return\n    ads.addEventListener(\"breakstart\", this.onadbreakstart)\n    ads.addEventListener(\"breakend\", this.onadbreakend)\n    ads.addEventListener(\"started\", this.onadstarted)\n    ads.addEventListener(\"timeremaining\", this.onadtimeremaining)\n    ads.addEventListener(\"impression\", this.onadimpression)\n  }\n\n  onmediachange() {\n    this.onadbreakend()\n  }\n\n  onadimpression() {\n    this.plugin.container.classList.update({\"amp-ad-overlaymode\": true})\n    this.player.ads.resize()\n  }\n\n  onadbreakstart(event) {\n    this.plugin.container.classList.update({\"amp-ad-break\": true})\n    const adVO = event.detail\n    this.setState({msg: \"\", time: \"\"})\n  }\n\n  onadstarted(event) {\n    this.controlsMode = this.plugin.mode\n    this.plugin.mode = this.plugin.adMode\n    this.player.container.classList.add(\"amp-ad-break\")\n    const adVO = event.detail || {}\n    const msg = (adVO.position == null || adVO.totalAds == null) ? \"\" : `${this.getLocalizedString(\"MSG_AD\")} ${adVO.position} ${this.getLocalizedString(\"MSG_OF\")} ${adVO.totalAds}`\n    this.setState({time: adVO.duration, msg})\n  }\n\n  onadbreakend(event) {\n    this.setState({msg: \"\", time: \"\"})\n    this.plugin.container.classList.update({\"amp-ad-break\": false})\n    this.player.container.classList.remove(\"amp-ad-break\")\n\n    this.plugin.mode = this.controlsMode\n  }\n\n  onadtimeremaining(event) {\n  \tif(this.player.playState == \"ready\")\n  \t  return\n    this.setState({time: event.detail})\n  }\n\n  render() {\n    const time = (this.state.time != \"\") ? Utils.formatTimecode(Math.ceil(this.state.time)) : this.state.time\n\n    return (\n      <div ref=\"containerNode\" className=\"amp-ads\">\n        <div ref=\"container\" className=\"amp-ad-container\" />\n        <div className=\"amp-bar amp-ad-info\">\n          <div ref=\"count\" className=\"amp-ad-component amp-ad-count\">{this.state.msg}</div>\n          <div ref=\"spacerLeft\" className=\"amp-spacer\" />\n          <div ref=\"spacerRight\" className=\"amp-spacer\" />\n          <div ref=\"time\" className=\"amp-ad-component amp-ad-time\">{time}</div>\n        </div>\n      </div>\n    )\n  }\n}\n","import Control from \"./Control.js\"\n\nexport default class Airplay extends Control {\n\n  constructor(props, context) {\n    super(props, context)\n    this.state.available = false\n    this.state.playing = false\n    this.classList.add(\"amp-airplay\", true)\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  get isAvailable() {\n    return (window.WebKitPlaybackTargetAvailabilityEvent != null)\n  }\n\n  get available() {\n    return (this.isAvailable && this.state.available)\n  }\n\n  set playing(value) {\n    this.state.playing = value\n    this.plugin.container.classList.update({\"amp-playback-target-airplay\": value})\n  }\n\n  get playing() {\n    return this.state.playing\n  }\n\n  onready(event) {\n    if (this.isAvailable === false)\n      return\n\n    const video = this.player.mediaElement\n    video.setAttribute(\"x-webkit-airplay\", \"allow\")\n    video.addEventListener(\"webkitplaybacktargetavailabilitychanged\", (event) => {\n      this.state.available = (event.availability == \"available\")\n      this.playing = video.webkitCurrentPlaybackTargetIsWireless\n      this.forceUpdate()\n    })\n    window.addEventListener(\"webkitcurrentplaybacktargetiswireless\", (event) => {\n      this.playing = video.webkitCurrentPlaybackTargetIsWireless\n    })\n  }\n\n  onClick() {\n    this.player.mediaElement.webkitShowPlaybackTargetPicker()\n  }\n\n  render() {\n    if (this.available === false)\n      return null\n\n    return super.render()\n  }\n}\n","import Control from \"./Control.js\"\n\nexport default class PiP extends Control {\n\n  constructor(props, context) {\n    super(props, context)\n    this.classList.add(\"amp-pip\", true)\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  get available() {\n    const mediaElement = this.player.mediaElement\n    if (mediaElement == null || typeof mediaElement.webkitSupportsPresentationMode != \"function\" || typeof mediaElement.webkitSetPresentationMode != \"function\")\n      return false\n    else\n      return mediaElement.webkitSupportsPresentationMode(\"picture-in-picture\")\n  }\n\n  onplaying(event) {\n    this.forceUpdate()\n  }\n\n  onClick(event) {\n    const mediaElement = this.player.mediaElement\n    mediaElement.webkitSetPresentationMode(mediaElement.webkitPresentationMode === \"picture-in-picture\" ? \"inline\" : \"picture-in-picture\");\n  }\n\n  render() {\n    if (!this.available)\n      return null\n\n    return super.render()\n  }\n}\n","import Control from \"./Control.js\"\nimport Utils from \"./Utils.js\"\n\nexport default class ChromeCast extends Control {\n\n  constructor(props, context) {\n    super(props, context)\n    this.state.available = false\n    this.classList.add(\"amp-chromecast\", true)\n  }\n\n  static get contextTypes() {\n    return super.contextTypes\n  }\n\n  onready() {\n    if (!Utils.componentEnabled(this.plugin, \"chromecast\"))\n      return\n\n    this.setState({available: this.player.chromecast.available})\n  }\n\n  onplaybacktargetavailabilitychange(event) {\n    if (event.detail.target === \"chromecast\") {\n      this.setState({available: event.detail.available})\n    }\n  }\n\n  get available() {\n    return this.state.available\n  }\n\n  onClick() {\n    this.player.chromecast.launch()\n  }\n\n  render() {\n    if (this.available === false)\n      return null\n\n    return super.render()\n  }\n}\n","export default class Mode {\n\n  constructor() {\n  }\n\n  static get AUTO() { return \"auto\" }\n  static get FIXED() { return \"fixed\" }\n  static get PERSISTENT() { return \"persistent\" }\n}\n","export default class ActiveState {\n\n  constructor() {\n  }\n\n  static get ACTIVE() { return \"active\" }\n  static get INACTIVE() { return \"inactive\" }\n  static get IDLE() { return \"idle\" }\n}\n","import Component from \"./Component.js\"\nimport Container from \"./Container.js\"\nimport PanelControl from \"./PanelControl.js\"\nimport PlayPause from \"./PlayPause.js\"\nimport PauseOverlay from \"./PauseOverlay.js\"\nimport BufferingOverlay from \"./BufferingOverlay.js\"\nimport CurrentTime from \"./CurrentTime.js\"\nimport Live from \"./Live.js\"\nimport Duration from \"./Duration.js\"\nimport Progress from \"./Progress.js\"\nimport Volume from \"./Volume.js\"\nimport Mute from \"./Mute.js\"\nimport Fullscreen from \"./Fullscreen.js\"\nimport SettingsButton from \"./SettingsButton.js\"\nimport SettingsPanel from \"./SettingsPanel.js\"\nimport ShareButton from \"./ShareButton.js\"\nimport SharePanel from \"./SharePanel.js\"\nimport CaptionToggleButton from \"./CaptionToggleButton.js\"\nimport JumpBack from \"./JumpBack.js\"\nimport JumpForward from \"./JumpForward.js\"\nimport Poster from \"./Poster.js\"\nimport Title from \"./Title.js\"\nimport ErrorMsg from \"./ErrorMsg.js\"\nimport Utils from \"./Utils.js\"\nimport ContextMenu from \"./ContextMenu.js\"\nimport Ads from \"./Ads.js\"\nimport Airplay from \"./Airplay.js\"\nimport PiP from \"./PiP.js\"\nimport ChromeCast from \"./ChromeCast.js\"\nimport AudioTracks from \"./AudioTracks.js\"\nimport Mode from \"./Mode.js\"\nimport ActiveState from \"./ActiveState.js\"\nimport Panel from \"./Panel.js\"\n\nexport default class UI extends Component {\n\n  constructor(props) {\n    super(props)\n    this.feature = \"ui\"\n    this.state.playState = \"ready\"\n    this.state.open = false\n    this.state.dragging = false\n    this.state.mode = this.config.mode\n    this.isTouchDevice = akamai.amp.Utils.isTouch\n    this.contextMenuClick = this.contextMenuClick.bind(this)\n    this.autoHide = (this.config.autoHide != null) ? this.config.autoHide : 3\n    this.timeout = null\n\n    this.bindHandlers([\"onMouseEnter\", \"onMouseLeave\", \"onFocus\", \"onBlur\", \"onKeyDown\", \"onContextMenu\", \"onClick\"])\n  }\n\n  getChildContext() {\n    return {\n      player: this.props.player,\n      config: this.props.config,\n      plugin: this\n    }\n  }\n\n  get adMode() {\n    return (this.config.adMode != null) ? this.config.adMode : Mode.AUTO\n  }\n\n  get debug() {\n    return (this.config.debug != null) ? this.config.debug : this.player.config.debug\n  }\n\n  get container() {\n    return this.refs.container\n  }\n\n  get ads() {\n    return this.refs.ads\n  }\n\n  get components() {\n    return this.refs\n  }\n\n  get controls() {\n    return this.refs.controls\n  }\n\n  get mode() {\n    return this.state.mode || Mode.AUTO\n  }\n\n  set mode(value) {\n    value = value || Mode.AUTO\n    const mode = this.state.mode\n    this.container.classList.update({\n      [`amp-controls-${mode}`]: false,\n      [`amp-controls-${value}`]: true\n    })\n    this.setState({mode: value})\n\n    if (value === Mode.AUTO) {\n      if (this.idleUtil == null) {\n        this.idleUtil = new akamai.amp.IdleUtil(this.player.viewComponent, this.autoHide * 1000)\n        this.idleUtil.addEventListener(\"activechange\", (event) => {\n          this.activeState = (event.detail.active !== true) ? ActiveState.INACTIVE : ActiveState.ACTIVE\n        })\n      }\n      this.idleUtil.start()\n    }\n    else {\n      if (this.idleUtil != null) {\n        this.idleUtil.stop()\n      }\n    }\n\n    // TODO: Remove these when controls plugin is completely removed from amp-web\n    this.player.container.classList.remove(`amp-controls-${mode}`)\n    this.player.container.classList.add(`amp-controls-${value}`)\n  }\n\n  get dragging() {\n    return this.state.dragging\n  }\n\n  set dragging(value) {\n    if (value == true) {\n      this.stopActiveTimeout()\n    }\n    else {\n      this.startActiveTimeout()\n    }\n    this.container.classList.update({[`amp-dragging`]: value})\n    this.setState({dragging: value})\n  }\n\n  get open() {\n    return this.state.open\n  }\n\n  set open(value) {\n    this.container.classList.update({[`amp-open`]: value})\n    this.setState({open: value})\n  }\n\n  onready(event) {\n    if (this.config.mode != null)\n      this.mode = this.config.mode\n\n    this.container.classList.update({\n      \"amp-cc-active\": this.player.captioning && !this.player.captioning.hidden,\n      \"amp-touch\": this.isTouchDevice\n    })\n\n    if (this.player.captioning != null) {\n      this.player.captioning.addEventListener(\"visibilitychange\", this.onvisibilitychange.bind(this))\n    }\n\n    this.player.container.addEventListener(\"mouseenter\", this.onMouseEnter)\n    this.player.container.addEventListener(\"mouseleave\", this.onMouseLeave)\n\n    // Workaround for UI flicker and FOUT\n    setTimeout(() => {\n      this.container.element.style.display = \"block\"\n    }, 10)\n  }\n\n  ondestroy() {\n    this.stopActiveTimeout()\n    this.player.container.removeEventListener(\"mouseenter\", this.onMouseEnter)\n    this.player.container.removeEventListener(\"mouseleave\", this.onMouseLeave)\n  }\n\n  onvisibilitychange(event) {\n    this.container.classList.update({\"amp-cc-active\": event.detail})\n  }\n\n  onplaybacktargetchange(event) {\n    this.container.classList.update({\"amp-remote-playback\": (event.detail.value != \"amp\")})\n  }\n\n  onmediachange(event) {\n    const media = this.player.media\n    this.container.classList.update({\"amp-audio\": media.medium == \"audio\"})\n    this.container.classList.update({\"amp-text-tracks\": media.tracks && media.tracks.length})\n  }\n\n  onfullscreenchange(event) {\n    this.container.classList.update({\"amp-full-screen\": event.detail})\n  }\n\n  onplaystatechange(event) {\n    const updates = {\n      [`amp-waiting`]: false,\n      [`amp-${event.detail.previous}`]: false,\n      [`amp-${event.detail.value}`]: true\n    }\n    this.container.classList.update(updates)\n   }\n\n  oncanplaythrough(event) {\n    this.container.classList.update({\"amp-can-play\": true})\n  }\n\n  onplaying(event) {\n    this.container.classList.update({\"amp-waiting\": false})\n\n    if (!this.isTouchDevice)\n      return\n\n    this.startActiveTimeout()\n  }\n\n  onwaiting(event) {\n    this.container.classList.update({\"amp-waiting\": true})\n    this.player.once(\"timeupdate\", () => {\n      if (this.player.seeking === false) {\n        this.container.classList.update({\"amp-waiting\": false})\n      }\n    })\n  }\n\n  onbusy(event) {\n    this.container.classList.update({\"amp-busy\": event.detail})\n  }\n\n  onseeking(event) {\n    this.container.classList.update({\"amp-waiting\": true})\n  }\n\n  onseeked(event) {\n    this.container.classList.update({\"amp-waiting\": false})\n  }\n\n  onerror(event) {\n    this.container.classList.update({\"amp-error\": true})\n  }\n\n  onislive(event) {\n    this.container.classList.update({\"amp-is-live\": event.detail})\n  }\n\n  ontemporaltypechange(event) {\n    const updates = {\n      [`amp-${event.detail.previous}`]: false,\n      [`amp-${event.detail.value}`]: true\n    }\n    this.container.classList.update(updates)\n  }\n\n  onqualitychanging(event) {\n    this.container.classList.add(\"amp-qualitychange-\"+this.player.getQualityMode())\n  }\n\n  onqualitychanged(event) {\n    this.container.classList.remove(\"amp-qualitychange-\"+this.player.getQualityMode())\n  }\n\n  togglePlayPause() {\n    if (this.player.playState == \"ready\" || this.player.paused) {\n      this.player.play()\n    } else {\n      this.player.pause()\n    }\n  }\n\n  set activeState(value) {\n    const active = (value == ActiveState.ACTIVE)\n    const inactive = (value == ActiveState.INACTIVE)\n    const idle = (value == ActiveState.IDLE)\n    this.container.classList.update({\"amp-active\": active, \"amp-inactive\": inactive, \"amp-idle\": idle})\n\n    // TODO: Remove these when controls plugin is completely removed from amp-web\n    let action = active ? \"add\" : \"remove\"\n    this.player.container.classList[action](\"amp-active\")\n\n    action = inactive ? \"add\" : \"remove\"\n    this.player.container.classList[action](\"amp-inactive\")\n\n    if (inactive === true) {\n      for (let key in this.refs) {\n        const value = this.refs[key]\n        if (value instanceof Panel && value.open === true) {\n          value.open = false\n        }\n      }\n      this.startActiveTimeout()\n    }\n  }\n\n  get activeState() {\n    switch (true) {\n      case this.container.classList.contains(\"amp-active\"):\n        return ActiveState.ACTIVE\n\n      case this.container.classList.contains(\"amp-inactive\"):\n        return ActiveState.INACTIVE\n\n      default:\n        return ActiveState.IDLE\n    }\n  }\n\n  get adInProgress() {\n    return (this.player.ads && this.player.ads.inProgress)\n  }\n\n  startActiveTimeout() {\n    if(this.refs.settingsPanel.open) {\n      this.refs.settingsPanel.close()\n    }\n    this.stopActiveTimeout()\n    this.timeout = setTimeout(() => {\n      this.activeState = ActiveState.IDLE\n    }, this.autoHide * 1000)\n  }\n\n  stopActiveTimeout() {\n    clearTimeout(this.timeout)\n  }\n\n  onMouseEnter(event) {\n    this.stopActiveTimeout()\n    this.activeState = ActiveState.ACTIVE\n  }\n\n  onMouseLeave(event) {\n    const element = document.elementFromPoint(event.clientX, event.clientY)\n    if (this.player.playState == \"ready\" || this.open || this.player.container.contains(element))\n      return\n\n    if (this.dragging) {\n      const handler = () => {\n        window.removeEventListener(\"mouseup\", handler)\n        if (!akamai.amp.Utils.isMouseOverElement(this.container.element))\n          this.onMouseLeave(event)\n      }\n      window.addEventListener(\"mouseup\", handler)\n      return\n    }\n\n    this.activeState = ActiveState.INACTIVE\n  }\n\n  onClick() {\n    if (this.isTouchDevice) {\n      if (this.activeState == ActiveState.ACTIVE) {\n        this.activeState = ActiveState.IDLE\n      }\n      else {\n        this.activeState = ActiveState.ACTIVE\n        this.startActiveTimeout()\n      }\n    }\n    else {\n      this.togglePlayPause()\n    }\n  }\n\n  isFocused(element) {\n    const container = this.container.element\n    return (element == container || container.contains(element))\n  }\n\n  onFocus(event) {\n    const focused = this.isFocused(event.target)\n    this.focused = (event.target.nodeName != \"BUTTON\" && focused)\n    if (focused)\n      this.container.classList.add(\"amp-active\")\n  }\n\n  onBlur(event) {\n    const focused = this.isFocused(event.target)\n    this.focused = (event.target.nodeName != \"BUTTON\" && focused)\n    if (!focused)\n      this.onMouseLeave(event)\n  }\n\n  onKeyDown(event) {\n    switch (event.keyCode) {\n      case 77: // M\n        this.player.muted = !this.player.muted\n      break;\n\n      case 67: // C\n          this.player.captioning.hidden = !this.player.captioning.hidden\n      break;\n\n      case 70: // F\n        this.player.displayState == this.player.displayState == 'full-screen'? this.player.exitFullScreen() : this.player.enterFullScreen()\n      break;\n    }\n\n    if (this.focused == false)\n      return\n\n    switch (event.keyCode) {\n      case 13: // Enter\n      case 32: // Space\n        this.togglePlayPause()\n      break;\n\n      case 39: // Left\n      case 37: // Right\n        if (this.refs.volume.focused === false)\n          this.refs.progress.onKeyDown(event)\n      break;\n\n      case 38: // Up\n      case 40: // Down\n        if (this.refs.progress.focused === false)\n          this.refs.volume.onKeyDown(event)\n      break;\n    }\n  }\n\n  contextMenuClick(event) {\n    if (/selectable/.test(event.target.className))\n      return false\n    this.removeContextMenu(event)\n    return false\n  }\n\n  removeContextMenu(event) {\n    document.body.removeEventListener(\"click\", this.contextMenuClick)\n    const parent = document.body\n    parent.removeChild(this.contextMenu)\n    this.contextMenu = null\n  }\n\n  onContextMenu(event) {\n    if (this.debug === true)\n      return\n\n    event.preventDefault()\n\n    const parent = document.body\n    const contextMenu = (\n      <ContextMenu player={this.player} x={event.pageX} y={event.pageY} />\n    )\n\n    if (this.contextMenu != null)\n      this.removeContextMenu()\n\n    this.contextMenu = document.createElement(\"div\")\n    parent.appendChild(this.contextMenu)\n    document.body.addEventListener(\"click\", this.contextMenuClick)\n    ReactDOM.render(contextMenu, this.contextMenu)\n  }\n\n  replay() {\n    this.player.replay()\n    setTimeout(this.player.play.bind(this.player), 150)\n  }\n\n  render() {\n    return (\n      <Container ref=\"container\"\n          tabIndex=\"0\"\n          style={{display: \"none\"}}\n          classList={[\"amp-react\", \"amp-ui\", \"amp-ready\", \"amp-active\"]}\n          onFocus={this.onFocus}\n          onBlur={this.onBlur}\n          onKeyDown={this.onKeyDown}\n          onContextMenu={this.onContextMenu}\n          >\n        <div className=\"amp-interactive\" onClick={this.onClick} />\n        <Poster ref=\"poster\" />\n        <Title ref=\"title\" />\n        <Ads ref=\"ads\" />\n        <PauseOverlay ref=\"pauseOverlay\" />\n        <BufferingOverlay ref=\"bufferingOverlay\" />\n        <Progress ref=\"progress\" />\n        <Container ref=\"controls\" className=\"amp-controls amp-bar\">\n          <PlayPause ref=\"playpause\" />\n          <JumpBack ref=\"jumpback\"/>\n          <JumpForward ref=\"jumpforward\"/>\n          <div ref=\"timeDisplay\" className=\"amp-time-display\">\n             <CurrentTime ref=\"currentTime\" />\n             <span ref=\"timeSeparator\" className=\"amp-time-separator\" />\n             <Duration ref=\"duration\" />\n             <Live ref=\"live\" />\n          </div>\n          <Mute ref=\"mute\" />\n          <Volume ref=\"volume\" />\n          <div ref=\"spacerLeft\" className=\"amp-spacer\" />\n          <div ref=\"spacerRight\" className=\"amp-spacer\" />\n          <ShareButton ref=\"share\" panel=\"sharePanel\" />\n          <CaptionToggleButton ref=\"cc\" />\n          <SettingsButton ref=\"settings\" panel=\"settingsPanel\" />\n          <PiP ref=\"pip\" />\n          <Airplay ref=\"airplay\" />\n          <ChromeCast ref=\"chromecast\" />\n          <Fullscreen ref=\"fullscreen\" />\n        </Container>\n        <SharePanel ref=\"sharePanel\" />\n        <SettingsPanel ref=\"settingsPanel\" />\n        <ErrorMsg ref=\"error\" />\n        {this.state.contextMenu}\n      </Container>\n    )\n  }\n\n  destroy() {\n    ReactDOM.unmountComponentAtNode(this._container)\n  }\n\n  static get childContextTypes() {\n    return {\n      player: PropTypes.object,\n      config: PropTypes.object,\n      plugin: PropTypes.object\n    }\n  }\n\n  static create(player, config) {\n    if (config.native === true) {\n      const ui = {config}\n      player.once(\"ready\", () => player.mediaElement.controls = true)\n      if (player.ads != null) {\n        ui.ads = {\n          container: document.createElement(\"div\")\n        }\n        player.container.appendChild(ui.ads.container)\n      }\n      return Promise.resolve(ui)\n    }\n\n    return new Promise((resolve, reject) => {\n      player.once(\"ready\", () => {\n        if (player.mediaElement.setPlayerProperty != null)\n          player.mediaElement.setPlayerProperty(\"controlsMode\", \"none\")\n      })\n      resolve(\n        ReactDOM.render(<UI player={player} config={config} />, player.container)\n      )\n    })\n  }\n}\n","import \"./main.less\"\nimport UI from \"./UI.js\"\n\nakamai.amp.AMP.registerPlugin(\"react\", [\"html\", \"flash\", \"external\"], UI.create)\n\nexport {default as Component} from \"./Component.js\"\nexport {default as Container} from \"./Container.js\"\nexport {default as ClassList} from \"./ClassList.js\"\nexport {default as Panel} from \"./Panel.js\"\nexport {default as PanelMenu} from \"./PanelMenu.js\"\nexport {default as PanelControl} from \"./PanelControl.js\"\nexport {default as ListItem} from \"./ListItem.js\"\nexport {default as Mode} from \"./Mode.js\"\n\nexport {UI}\n"]}