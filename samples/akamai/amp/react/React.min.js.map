{"version":3,"sources":["../../../../src/AMPClassList.js","../../../../src/AMPComponent.js","../../../../src/AMPContainer.js","../../../../src/AMPControl.js","../../../../src/AMPPanelControl.js","../../../../src/PlayPause.js","../../../../src/PauseOverlay.js","../../../../src/Rewind.js","../../../../src/Utils.js","../../../../src/CurrentTime.js","../../../../src/Duration.js","../../../../src/Slider.js","../../../../src/Progress.js","../../../../src/Volume.js","../../../../src/Mute.js","../../../../src/Fullscreen.js","../../../../src/Panel.js","../../../../src/PlaybackRate.js","../../../../src/Bitrate.js","../../../../src/captionsettings/Home.js","../../../../src/captionsettings/Options.js","../../../../src/captionsettings/BackgroundColor.js","../../../../src/captionsettings/BackgroundOpacity.js","../../../../src/captionsettings/CharacterEdgeStyle.js","../../../../src/captionsettings/FontColor.js","../../../../src/captionsettings/FontFamily.js","../../../../src/captionsettings/FontOpacity.js","../../../../src/captionsettings/FontSize.js","../../../../src/captionsettings/WindowColor.js","../../../../src/captionsettings/WindowOpacity.js","../../../../src/captionsettings/ScrollType.js","../../../../src/CaptionSettings.js","../../../../src/Settings.js","../../../../src/Share.js","../../../../src/CaptionToggleButton.js","../../../../src/UI.js"],"names":["AMPClassList","component","tokens","token","remove","tokenMap","this","contains","AMPComponent","__proto__","Object","getPrototypeOf","call","props","className","_React$Component","state","key","classList","_key","nextProps","event","_this2","bind","trim","element","type","_iteratorError","_AMPComponent","AMPContainer","player","setState","createElement","AMPControl","components","mouseFocus","onClick","onBlur","altText","onKeyDown","textContent","children","get","prototype","_babelHelpers$get","objectWithoutProperties","possibleConstructorReturn","AMPPanelControl","_AMPControl","classCallCheck","panel","PlayPause","PauseOverlay","Rewind","isNaN","time","strTime","factor","Math","documentElement","scrollTop","root","offsetLeft","scrollLeft","clientLeft","top","width","clientTop","offsetParent","height","clientX","targetTouches","CurrentTime","clientY","formatTimecode","duration","Duration","Slider","offset","x","code","Utils","round","increment","React","onKeyPress","style","value","left","onFocus","ref","clamp","akamai","amp","Progress","_Slider","Volume","volume","Mute","level","Fullscreen","fullscreenchange","add","amp-full","fullscreenElement","Panel","exitFullScreen","open","update","amp-open","_open","onopen","babelHelpers","addEventListener","onclose","PlaybackRate","rates","rate","Bitrate","playbackRate","undefined","listOptions","bitrateIndex","onBitrateChange","bitrateArray","levels","bitrate","err","item","autoLevel","map","object","index","indexOf","data","clickHandler","Home","OptionsList","lang","getLanguageString","label","Options","parentKey","match","BackgroundColor","backgroundColor","activeIndex","BackgroundOpacity","backgroundOpacity","CharacterEdgeStyle","edgeType","FontColor","fontColor","FontFamily","fontFamily","fontOpacity","fontSize","windowColor","windowOpacity","scroll","CaptionSettings","languageSelected","captionsettings","_this","changeView","changeSettings","tracksloaded","trackselected","captionTracks","push","track","language","tracks","detail","len","kind","endsWith","showing","captioning","settingObject","selectTrackByLanguage","toState","toLevel","hasOwnProperty","opacity","matchColors","exec","typeof","replace","setCaptionSettings","extends","languages","gotoSettings","FontSize","FontOpacity","WindowColor","WindowOpacity","ScrollType","localization","getHidden","setHidden","Settings","settingsLevel","changeState","bitrateLabel","captioningTracks","_Panel","Share","confirm","icon","CaptionToggleButton","inherits","UI","timeout","media","container","waiting","pause","amp-inactive","autoHide","activeLocked","setTimeout","onMouseLeave","console","log","_this3","togglePlayPause","mouseenter","src","poster","tabIndex","mouseleave","refs","sharePanel","_container","_waiting","_playstate","ready","reject","document","render","config","Promise","react"],"mappings":"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","file":"akamai/amp/react/React.min.js","sourcesContent":["export default class AMPClassList {\n\n  constructor(component, tokens = []) {\n    this.component = component\n    this.tokens = tokens\n  }\n  \n  add(token) {\n    if (this.contains(token)) \n      return\n    this.tokens.push(token)\n  }\n  \n  contains(token) {\n    return this.tokens.indexOf(token) !== -1\n  }\n  \n  item(index) {\n    return this.tokens[index] || null\n  }\n  \n  remove(token) {\n    const i = this.tokens.indexOf(token)\n     if (i === -1)\n       return\n    this.tokens.splice(i, 1)\n  }\n  \n  toggle(token) {\n    if (this.contains(token)) {\n      this.remove(token)\n    } else {\n      this.add(token)\n    }\n  }\n  \n  update(tokenMap) {\n    for (let token in tokenMap) {\n      if (tokenMap[token]) {\n        this.add(token)\n      } else {\n        this.remove(token)\n      }\n    }\n    \n    let className = this.toString()\n    if (className != this.component.state.className)\n      this.component.setState({className})\n  }\n  \n  toString() {\n    return this.tokens.join(' ')\n  }\n}","import AMPClassList from \"./AMPClassList.js\"\n\nexport default class AMPComponent extends React.Component {\n  \n  constructor (props) {\n    super(props)\n    this.state = {}\n    this.classList = new AMPClassList(this, this.props.classList)\n  }\n  \n  get player() {\n    return this.props.player\n  }\n  \n  get config() {\n    return this.props.config\n  }\n  \n  get className() {\n    let className = this.props.className || \"\"\n    className += ` ${this.classList}`\n    \n    return className.trim()\n  }\n  \n  get textContent() {\n    return \"\"\n  }\n  \n  get element() {\n    return this.refs.element\n  }\n  \n  get playerEventMap() {\n    const events = []\n    let key, type\n    \n    if (this.player == null)\n      return events\n    \n    for (type of akamai.amp.Events.values) {\n      key = `on${type}`\n      if (typeof this[key] != \"function\")\n        continue\n      events.push({key: key, type: type})\n    }\n    \n    return events\n  }\n  \n  get propsList() {\n    const { player, config, className, classList, ...props } = this.props\n    return props\n  }\n  \n  shouldComponentUpdate(nextProps, nextState) {\n    let state = this.state\n    let props = this.props\n    \n    if (nextState != null) {\n      for (let key in nextState) {\n        if (nextState[key] != state[key]) {\n          return true\n        }\n      }\n    }\n    \n    // TODO: Is this needed?\n    if (nextProps != null) {\n      for (let key in nextProps) {\n        if (nextProps[key] != props[key]) {\n          return true\n        }\n      }\n    }\n    \n    return false\n  }\n  \n  componentWillMount() {\n    this.playerEventMap.forEach((event) => {\n      this[event.key] = this[event.key].bind(this)\n      this.player.addEventListener(event.type, this[event.key])\n    }) \n  }\n  \n  componentWillUnmount() {\n    this.playerEventMap.forEach((event) => {\n      this.player.removeEventListener(event.type, this[event.key])\n    })\n  }\n  \n  render() {\n    return <div ref=\"element\" {...this.propsList} className={this.className}>{this.state.textContent}{this.props.children}</div>\n  }\n}","import AMPComponent from \"./AMPComponent.js\"\n\nexport default class AMPContainer extends AMPComponent {\n  constructor(props) {\n    super(props)\n    this.state.components = []\n  }\n  \n  addComponent(component) {\n    let components = this.state.components.slice()\n    components.push(component)\n    this.setState({components})\n  }\n  \n  removeComponent(component) {\n    let components = this.state.components.filter((item) => item != component)\n    this.setState({components})\n  }\n  \n  render() {\n    return (\n      <div ref=\"element\" {...this.propsList} className={this.className}>\n        {this.props.children}\n        {this.state.components}\n      </div>\n    )\n  }\n}","import AMPComponent from \"./AMPComponent.js\"\n\nexport default class AMPControl extends AMPComponent {\n  constructor(props) {\n    super(props)\n    this.classList.add(\"amp-icon\")\n    this.classList.add(\"amp-control\")\n    this.mouseFocus = false\n    this.state.altText = this.altText\n  }\n  \n  get propsList() {\n    const { altText, ...props } = super.propsList\n    return props\n  }\n  \n  get altText() {\n    if (this.player == null)\n      return \"\"\n    return this.player.l10n[this.props.altText]\n  }\n  \n  onlanguagechange() {\n    this.setState({altText: this.altText})\n  }\n  \n  onMouseDown(event) {\n    this.mouseFocus = true\n  }\n  \n  onMouseUp(event) {\n    this.mouseFocus = false\n  }\n  \n  onFocus(event) {\n    if (this.mouseFocus == true)\n      return\n      \n    this.classList.update({\"amp-focus\": true})\n  }\n  \n  onBlur(event) {\n    if (this.mouseFocus == true)\n      return\n      \n    this.classList.update({\"amp-focus\": false})\n  }\n  \n  onKeyDown(event) {\n    if (this.mouseFocus == true)\n      return\n      \n    this.onKeyPress(event)\n    \n    if (event.type == \"keypress\" && (event.keyCode == 13 || event.keyCode == 32))\n      this.onAction()\n  }\n  \n  onAction() {\n    this.onClick()\n  }\n  \n  onKeyPress(event) {\n\n  }\n  \n  onClick(event) {\n    \n  }\n  \n  render() {\n    return (\n      <button ref=\"element\" {...this.propsList} \n          className={this.className} \n          tabIndex=\"0\"\n          title={this.state.altText}\n          aria-label={this.state.altText}\n          onMouseDown={(event) => this.onMouseDown(event)}\n          onMouseUp={(event) => this.onMouseUp(event)}\n          onFocus={(event) => this.onFocus(event)}\n          onBlur={(event) => this.onBlur(event)}\n          onKeyDown={(event) => this.onKeyDown(event)}\n          onClick={(event) => this.onClick(event)}>\n        {this.state.textContent}\n        {this.props.children}\n        {this.state.components}\n      </button>\n    )\n  }\n}","import AMPControl from \"./AMPControl.js\"\n\nexport default class AMPPanelControl extends AMPControl {\n  constructor(props) {\n    super(props)\n  }\n  \n  get panel() {\n    return this.props.panel\n  }\n  \n  get propsList() {\n    const { panel, ...props } = super.propsList\n    return props\n  }\n  \n  onClick(event) {\n    this.panel.toggle()\n  }\n}","import AMPControl from \"./AMPControl.js\"\n\nexport default class PlayPause extends AMPControl {\n  \n  constructor(props) {\n    super(props)\n    this.classList.add(\"amp-playpause\")\n  }\n  \n  onplaying() {\n    this.setState({altText: this.player.l10n[\"MSG_PAUSE\"]})\n  }\n  \n  onpause() {\n    this.setState({altText: this.player.l10n[\"MSG_PLAY\"]})\n  }\n  \n  onended() {\n    this.setState({altText: this.player.l10n[\"MSG_REPLAY\"]})\n  }\n  \n  onClick() {\n    const player = this.player\n    switch (player.playState) {\n      case \"ended\":\n        player.currentTime = 0;\n      case \"ready\":\n      case \"paused\":\n        player.play()\n      break;\n      \n      default:\n        player.pause()\n      break;\n    }\n  }\n\n} ","import AMPControl from \"./AMPControl.js\"\n\nexport default class PauseOverlay extends AMPControl {\n  \n  constructor(props) {\n    super(props)\n    this.classList.add(\"amp-pause-overlay\")\n  }\n  \n  onClick() {\n    this.player.play()\n  }\n\n} ","import AMPControl from \"./AMPControl.js\"\n\nexport default class Rewind extends AMPControl {\n  \n  constructor(props) {\n    super(props)\n    this.classList.add(\"amp-rewind\")\n  }\n  \n  onClick() {\n    this.player.currentTime = Math.max(this.player.currentTime - 15, 0)\n  }\n\n} ","export default class Utils {\n  \n  /**\n   * Takes a time in seconds and converts it to timecode.\n   * \n   * @param   {Number}  time  The time in seconds to be formatted.\n   * @return  {String}  A SMTP formatted string.\n   */\n  static formatTimecode(time, duration) {\n    time = parseInt(time)\n    if (isNaN(time)) {\n      return \"00:00\"\n    }\n    var strTime = Utils.formatZeroFill(time % 60)\n    time = parseInt(time / 60)\n    strTime = Utils.formatZeroFill(time % 60) + \":\" + strTime\n    time = parseInt(time / 60)\n    if (time > 0) {\n      strTime = Utils.formatZeroFill(time) + \":\" + strTime\n    }\n    if (duration >= 3600 && strTime.length === 5) {\n      strTime = \"00:\" + strTime\n    }\n    return strTime\n  }\n\n\n  /**\n   * Converts a time in seconds to a string and adds a zero in front of any number lower than 10.\n   * \n   * @param {Number} time The number to be zero filled.\n   */\n  static formatZeroFill(time) {\n    var str = time.toString()\n    if (time < 10) {\n      str = \"0\" + str\n    }\n    return str\n  }\n  \n  /**\n   * @param {Number} number \n   *    The number to be rounded.\n   *\n   * @param {Number} precision \n   *    The level of precision. Positive 1 would round to 1 decimal place and -1 would round to the tens.\n   *\n   * @return {Number}\n   *    The rounded number.\n   */\n  static round(number, precision) {\n    const factor = Math.pow(10, precision)\n    return Math.round(number * factor) / factor\n  }\n  \n  static getElementOffset(element, root = document.fullscreenElement || document.webkitFullscreenElement || document.mozFullscreenElement) {\n    let left = 0\n    let top = 0\n    let width = element.offsetWidth\n    let height = element.offsetHeight\n    let scrollLeft = 0\n    let scrollTop = 0\n    \n    while (element && element !== root) {\n      if (element.tagName === \"BODY\") {\n        scrollLeft = element.scrollLeft || document.documentElement.scrollLeft\n        scrollTop = element.scrollTop || document.documentElement.scrollTop\n        left += element.offsetLeft - scrollLeft + element.clientLeft\n        top += element.offsetTop - scrollTop + element.clientTop\n      } else {\n        left += element.offsetLeft - element.scrollLeft + element.clientLeft\n        top += element.offsetTop - element.scrollTop + element.clientTop\n      }\n      element = element.offsetParent\n    }\n    \n    return {left, top, width, height}\n  }\n  \n  static getEventPos(event) {\n    return {\n      x: event.clientX || event.targetTouches[0].clientX,\n      y: event.clientY || event.targetTouches[0].clientY\n    }\n  }\n}","import AMPComponent from \"./AMPComponent.js\"\nimport Utils from \"./Utils.js\"\n\nexport default class CurrentTime extends AMPComponent {\n  \n  constructor(props) {\n    super(props)\n    this.state.currentTime = 0\n  }\n  \n  ontimeupdate() {\n    this.setState({currentTime: Math.round(this.player.currentTime)})\n  }\n  \n  render() {\n    return <span className=\"amp-current-time\">{Utils.formatTimecode(this.state.currentTime, this.props.player.duration)}</span>\n  }\n  \n}","import AMPComponent from \"./AMPComponent.js\"\nimport Utils from \"./Utils.js\"\n\nexport default class Duration extends AMPComponent {\n  \n  constructor(props) {\n    super(props)\n    this.state.duration = props.player.duration\n  }\n  \n  ondurationchange() {\n    this.setState({duration: Math.round(this.player.duration)})\n  }\n  \n  render() {\n    console.log(\"Duration.render\")\n    return <span className=\"amp-duration\">{Utils.formatTimecode(this.state.duration, this.state.duration)}</span>\n  }\n  \n}","import AMPControl from \"./AMPControl.js\"\nimport AMPContainer from \"./AMPContainer.js\"\nimport Utils from \"./Utils.js\"\n\nexport default class Slider extends AMPControl {\n  \n  constructor(props) {\n    super(props)\n    this.state.value = 0\n    this.state.time = 0\n    this.increment = 0.1\n    this.classList.add(\"amp-slider\")\n  }\n  \n  set value(value) {\n    // TODO: Replace with akamai.amp.Utils.clamp\n    value = akamai.amp.utils.Utils.clamp(value, 0, 1)\n    \n    if (this.value == value)\n      return\n    \n    this.setState({value})\n    this.valueChanged(value)\n  }\n  \n  get value() {\n    return this.state.value\n  }\n  \n  get markers() {\n    return this.refs.markers\n  }\n  \n  onClick(event) {\n    const offset = Utils.getElementOffset(this.refs.element)\n    const pos = Utils.getEventPos(event)\n    this.value = (pos.x - offset.left) / offset.width\n  }\n  \n  onAction() {\n    \n  }\n  \n  onKeyPress(event) {\n    const code = event.keyCode\n    // left arrow\t37\n    // up arrow\t38\n    // right arrow\t39\n    // down arrow\t40\n    if (code == 39 || code == 38) {\n      this.value += this.increment\n    } else if (code == 37 || code == 40) {\n      this.value -= this.increment\n    }\n  }\n  \n  valueChanged() {}\n  \n  render() {\n    const value = `${Utils.round(this.value * 100, 2)}%`\n    return (\n      <div ref=\"element\" {...this.propsList} \n          className={this.className} \n          tabIndex=\"0\"\n          title={this.state.altText}\n          aria-label={this.state.altText}\n          onMouseDown={(event) => this.onMouseDown(event)}\n          onMouseUp={(event) => this.onMouseUp(event)}\n          onFocus={(event) => this.onFocus(event)}\n          onBlur={(event) => this.onBlur(event)}\n          onKeyDown={(event) =>  this.onKeyPress(event)}\n          onClick={(event) => this.onClick(event)}>\n        <div className=\"amp-value\" style={{width: value}}></div>\n        <div className=\"amp-handle\" style={{left: value}}></div>\n        <AMPContainer ref=\"markers\" className=\"amp-markers\"></AMPContainer>\n        <div className=\"amp-text\" style={{left: value}}>{this.state.time}</div>\n      </div>\n    )\n  }\n  \n}","import Slider from \"./Slider.js\"\n\nexport default class Progress extends Slider {\n  \n  constructor(props) {\n    super(props)\n    this.classList.add(\"amp-progress\")\n  }\n  \n  updateValue() {\n    this.setState({value: this.player.currentTime / this.player.duration})\n  }\n  \n  ontimeupdate() {\n    this.updateValue()\n  }\n  \n  ondurationchange() {\n    this.increment = 10 / this.player.duration\n    this.updateValue()\n  }\n  \n  valueChanged(value) {\n    this.player.currentTime = value * this.player.duration\n  }\n}","import Slider from \"./Slider.js\"\n\nexport default class Volume extends Slider {\n  \n  constructor(props) {\n    super(props)\n    this.classList.add(\"amp-volume\")\n    this.state.value = this.player.volume\n  }\n  \n  onvolumechange() {\n    this.setState({value: this.player.volume})\n  }\n  \n  valueChanged(value) {\n    this.player.volume = value\n  }\n}","import AMPControl from \"./AMPControl.js\"\n\nexport default class Mute extends AMPControl {\n  \n  constructor(props) {\n    super(props)\n    this.state.level = \"\"\n    this.classList.add(\"amp-mute\")\n  }\n  \n  get className() {\n    return `${super.className} ${this.state.level}`\n  }\n  \n  onClick() {\n    const player = this.player\n    player.muted = !player.muted\n  }\n  \n  onvolumechange() {\n    const volume = this.player.volume\n    let level = \"\"\n    \n    if (volume == 0) {\n      level = \"amp-muted\"\n    } else if (volume < 0.5) {\n      level = \"amp-low\"\n    }\n    \n    this.setState({level})\n  }\n} ","import AMPControl from \"./AMPControl.js\"\n\nexport default class Fullscreen extends AMPControl {\n  \n  constructor(props) {\n    super(props)\n    this.event = (document.onwebkitfullscreenchange !== undefined) ? \"webkitfullscreenchange\" : (document.onmozfullscreenchange !== undefined) ? \"mozfullscreenchange\" : \"fullscreenchange\"\n    this.requestFullscreen = (this.player.container.requestFullscreen || this.player.container.webkitRequestFullscreen).bind(this.player.container)\n    this.exitFullscreen = (document.exitFullscreen || document.webkitExitFullscreen).bind(document)\n    this.fullscreenchange = this.fullscreenchange.bind(this)\n    this.classList.add(\"amp-fullscreen\")\n  }\n  \n  onfullscreenchange(event) {\n    const key = (event.detail) ? \"MSG_EXIT_FULLSCREEN\" : \"MSG_ENTER_FULLSCREEN\"\n    this.setState({altText: this.player.l10n[key]})\n  }\n  \n  get fullscreenElement() {\n    return document.fullscreenElement || document.webkitFullscreenElement\n  }\n  \n  fullscreenchange() {\n    this.classList.update({\"amp-full\": (this.fullscreenElement != null)})\n  }\n  \n  componentWillMount() {\n    super.componentWillMount()\n    document.addEventListener(this.event, this.fullscreenchange)\n  }\n  \n  componentWillUnmount() {\n    super.componentWillUnmount()\n    document.removeEventListener(this.event, this.fullscreenchange)\n  }\n  \n  onClick() {\n    if (this.fullscreenElement == null) {\n      this.player.enterFullScreen()\n    } else {\n      this.player.exitFullScreen()\n    }\n  }\n} ","import AMPComponent from \"./AMPComponent.js\"\n\nexport default class Panel extends AMPComponent {\n  \n  constructor(props) {\n    super(props)\n    this.closeHandler = this.closeHandler.bind(this)\n  }\n  \n  set open(value) {\n    if (value == this._open)\n      return\n      \n    this._open = value\n    this.classList.update({\"amp-open\": this._open})\n    \n    if (this._open) {\n      document.addEventListener(\"click\", this.closeHandler)\n      if (this.props.onopen)\n        this.props.onopen(this)\n    } else {\n      if (this.props.onclose)\n        this.props.onclose(this)\n    }\n  }\n  \n  get open() {\n    return this._open\n  }\n  \n  get propsList() {\n    const { onclose, onopen, ...props } = super.propsList\n    return props\n  }\n  \n  closeHandler(event) {\n    if (this.element === undefined || this.element.contains(event.target))\n      return\n      \n    this.open = false\n    document.removeEventListener(\"click\", this.closeHandler)\n  }\n  \n  toggle() {\n    this.open = !this.open\n  }\n  \n  close() {\n    this.open = false\n  }\n\n} ","import AMPControl from \"./AMPControl.js\"\n\nexport default class PlaybackRate extends AMPControl {\n  \n  constructor(props) {\n    super(props)\n    this.rates = [\n      \"\\u00BDx\",\n      \"1x\",\n      \"1\\u00BDx\",\n      \"2x\"\n    ]\n    this.state.rate = 1\n    this.state.textContent = this.rates[this.state.rate]\n    this.classList.add(\"amp-playback-rate\")\n  }\n  \n  onClick(event) {\n    let rate = this.state.rate + 1\n    if (rate >= this.rates.length)\n      rate = 0\n    this.player.playbackRate = (rate + 1) * 0.5\n    this.setState({rate: rate, textContent: this.rates[rate]})\n  }\n} ","import Panel from \"./Panel.js\"\n\nexport default class Bitrate extends Panel {\n  \n  constructor(props) {\n    super(props)\n    this.listOptions = []\n    this.bitrateArray = []\n    this.state.activeIndex = -1\n    this.player.addEventListener(\"bitratelevelsloaded\", this.onBitrateLoaded.bind(this))\n    this.player.addEventListener(\"bitratechanging\", this.onBitrateChange.bind(this))\n    \n  }\n  \n  componentWillMount() {\n    this.props.bitrate.bitrateArray && this.onBitrateLoaded()\n    this.props.bitrate.bitrateIndex !== undefined && this.onBitrateChange()\n    this.open = true\n   }\n  \n  clickHandler(object, index) {\n    this.player.setQuality(index)\n  }\n  \n  onBitrateLoaded(data) {\n    this.bitrateArray = data? data.data.levels : this.props.bitrate.bitrateArray\n    for (let item of this.bitrateArray) {\n      this.listOptions.push({\"label\": item.bitrate})\n    }\n    this.setState({redraw: true})\n  }\n  \n  onBitrateChange(data) {\n    let autoLevel = false\n    try {\n      autoLevel = this.player.playerCore.activePlaybackCore.player.autoLevelEnabled === true\n    } catch (e) {\n    } \n    \n    let index = autoLevel? -1 : (data? this.bitrateArray.indexOf(data.data) : this.props.bitrate.bitrateIndex)\n    \n    this.setState({activeIndex: index})\n  }\n  \n  render() {\n    \n    var OptionsList = this.listOptions.map(function(object,index){\n\n      return <div key={index}  className=\"amp-list-item\" onClick={this.clickHandler.bind(this, object, index)}>\n              <button className={index === this.state.activeIndex ? 'amp-icon amp-list-item-selected':'amp-icon'}></button>\n              <span>{object.label/1000} Kbps</span>\n             </div>\n    }, this);\n    \n    \n    return <div ref=\"element\">\n            <div className=\"amp-list-item amp-list-title\" onClick={this.props.gotoSettings.bind(this)}>\n              <button className=\"amp-icon amp-icon-left\"></button>\n              <span>Quality</span>\n            </div>\n            <div className=\"amp-list-item\" onClick={this.clickHandler.bind(this, null, -1)}>\n              <button className={-1 === this.state.activeIndex ? 'amp-icon amp-list-item-selected':'amp-icon'}></button>\n              <span>Auto</span>\n            </div>\n            {OptionsList}\n           </div>\n  }\n} ","import Panel from \"../Panel.js\"\n\nexport default class Home extends Panel {\n  \n  constructor(props) {\n    super(props)\n    this.listOptions = [{label:\"Off\"}]\n  }\n  \n  clickHandler (object, index) {\n    this.setState({activeIndex: index})\n    if (!index) {\n      return this.props.settingsChange({'showing':false});\n    }\n    this.props.settingsChange({\"language\": this.listOptions[index].label})\n  }\n  \n  render() {\n    this.listOptions.splice(1)\n    for (var lang in this.props.languages) {\n      this.listOptions.push({'label': this.props.languages[lang]})\n    }\n    \n    var OptionsList = this.listOptions.map(function(object, index){\n\n      return <div key={index}  className=\"amp-list-item\" onClick={this.clickHandler.bind(this, object, index)}>\n              <button className={index === this.state.activeIndex ? 'amp-icon amp-list-item-selected':'amp-icon'}></button>\n              <span>{this.props.player.localization.getLanguageString(object.label) || object.label}</span>\n             </div>\n    }, this);\n    \n    \n    return (\n      <div ref=\"element\" className=\"amp-captioning-home\">\n        <div>\n          <span className=\"amp-list-highlight\" onClick={this.props.gotoSettings.bind(this)}>\n            <button className=\"amp-icon amp-icon-left\"></button>\n            <span>Subtitles/CC</span>\n          </span>\n          <button onClick={this.props.viewChange.bind(this, \"options\")} className=\"amp-option-button\">Options</button>\n        </div>\n        \n        {OptionsList}\n      </div>\n    );   \n    \n  }\n}\n","import Panel from \"../Panel.js\"\n\nexport default class Options extends Panel {\n  \n  constructor(props) {\n    super(props)\n    this.listOptions = [{label:\"Font Family\", key:\"fontFamily\", value: \"Arial\"},\n                         {label:\"Font Color\", key:\"fontColor\", value: \"Red\"},\n                         {label:\"Font Size\", key:\"fontSize\", value: \"100%\"},\n                         {label:\"Font Opacity\", key:\"fontOpacity\", value: \"0%\"},\n                         {label:\"Background Color\", key:\"backgroundColor\", value: \"Black\"},\n                         {label:\"Background Opacity\", key:\"backgroundOpacity\", value: \"0%\"},\n                         {label:\"Window Color\", key:\"windowColor\", value: \"Red\"},\n                         {label:\"Window Opacity\", key:\"windowOpacity\", value: \"0%\"},\n                         {label:\"Character Edge Style\", key:\"edgeType\", value: \"None\"},\n                         {label:\"Scroll\", key:\"scroll\", value: \"Pop-out\"},\n                        ]\n  }\n  \n  \n  render() {\n    \n    var OptionsList = this.listOptions.map(function(object, index){\n      let parentKey = object.key.match(/(Color|Opacity|fontSize)/) ? object.key+\"Label\" : object.key\n      return <div key={object.key} onClick={this.props.viewChange.bind(this, object.key)} className=\"amp-list-item\">\n                <span className=\"amp-label\">{object.label}</span>\n                <button className=\"amp-icon amp-icon-right amp-right\"></button>\n                <span className=\"amp-right\">\n                  {this.props.captionsettings[parentKey]}\n                </span>\n             </div>\n    }, this);\n    \n    return <div className=\"amp-captioning-options\">\n            <div className=\"amp-list-item amp-list-title\" onClick={this.props.viewChange.bind(this, \"home\")}>\n              <button className=\"amp-icon amp-icon-left\"></button>\n              <span>Options</span>\n            </div>\n            {OptionsList}\n           </div>\n  }\n}\n","import Panel from \"../Panel.js\"\n\nexport default class BackgroundColor extends Panel {\n  \n  constructor(props) {\n    super(props)\n    this.listOptions = [{label:\"White\", value: \"rgb(255, 255, 255)\"},\n                         {label:\"Yellow\", value: \"rgb(255, 255, 0)\"},\n                         {label:\"Green\", value: \"rgb(0, 128, 0)\"},\n                         {label:\"Cyan\", value: \"rgb(0, 255, 255)\"},\n                         {label:\"Blue\", value: \"rgb(0, 0, 255)\"},\n                         {label:\"Magenta\", value: \"rgb(255, 0, 255)\"},\n                         {label:\"Red\", value: \"rgb(255, 0, 0)\"},\n                         {label:\"Black\", value: \"rgb(0, 0, 0)\"}\n                        ]\n    this.listOptions.map(function(object, index){ \n      if(object.label === props.captionsettings['backgroundColorLabel']) {\n        this.state.activeIndex = index\n      }\n    },this)\n  }\n  \n  clickHandler (object, index) {\n    this.setState({activeIndex: index})\n    this.props.settingsChange({\"backgroundColor\": { \"label\":object.label , \"value\":object.value}})\n  }\n  \n  render() {\n    \n    var OptionsList = this.listOptions.map(function(object, index){\n\n      return <div key={index}  className=\"amp-list-item\" onClick={this.clickHandler.bind(this, object, index)}>\n              <button className={index === this.state.activeIndex ? 'amp-icon amp-list-item-selected':'amp-icon'}></button>\n              <span>{object.label}</span>\n             </div>\n    }, this);\n    \n    return <div>\n            <div className=\"amp-list-item amp-list-title\" onClick={this.props.viewChange.bind(this, \"options\")}>\n              <button className=\"amp-icon amp-icon-left\"></button>\n              <span>Background Color</span>\n            </div>\n            {OptionsList}\n           </div>\n    \n    \n  }\n}\n","import Panel from \"../Panel.js\"\n\nexport default class BackgroundOpacity extends Panel {\n  \n  constructor(props) {\n    super(props)\n    this.listOptions = [{label:\"0%\", value: \"0\"},\n                         {label:\"25%\", value: \".25\"},\n                         {label:\"50%\", value: \".5\"},\n                         {label:\"75%\", value: \".75\"},\n                         {label:\"100%\", value: \"1\"}\n                        ]\n    this.listOptions.map(function(object, index){ \n      if(object.label === props.captionsettings['backgroundOpacityLabel']) {\n        this.state.activeIndex = index\n      }\n    },this)    \n  }\n  \n  clickHandler (object, index) {\n    this.setState({activeIndex: index})\n    this.props.settingsChange({\"backgroundOpacity\": { \"label\":object.label , \"value\":object.value}})\n  }\n  \n  render() {\n    \n    var OptionsList = this.listOptions.map(function(object, index){\n\n      return <div key={index} className=\"amp-list-item\" onClick={this.clickHandler.bind(this, object, index)}>\n              <button className={index === this.state.activeIndex ? 'amp-icon amp-list-item-selected':'amp-icon'}></button>\n              <span>{object.label}</span>\n             </div>\n    }, this);\n    \n    return <div>\n            <div className=\"amp-list-item amp-list-title\" onClick={this.props.viewChange.bind(this, \"options\")}>\n              <button className=\"amp-icon amp-icon-left\"></button>\n              <span>Background Opacity</span>\n            </div>\n            {OptionsList}\n           </div>\n    \n    \n  }\n}\n","import Panel from \"../Panel.js\"\n\nexport default class CharacterEdgeStyle extends Panel {\n  \n  constructor(props) {\n    super(props)\n    this.listOptions = [{label:\"None\", value: \"\"},\n                         {label:\"Depressed\", value: \"\"},\n                         {label:\"Left Drop Shadow\", value: \"\"},\n                         {label:\"Raised\", value: \"\"},\n                         {label:\"Right Drop Shadow\", value: \"\"},\n                         {label:\"Uniform\", value: \"\"}\n                        ]\n    this.listOptions.map(function(object, index){ \n      if(object.label === props.captionsettings['edgeType']) {\n        this.state.activeIndex = index\n      }\n    },this)    \n\n  }\n  \n  clickHandler (object, index) {\n    this.setState({activeIndex: index})\n    this.props.settingsChange({\"edgeType\": { \"label\":object.label , \"value\":object.value}})\n  }\n  \n  render() {\n    \n    var OptionsList = this.listOptions.map(function(object, index){\n\n      return <div key={index} className=\"amp-list-item\" onClick={this.clickHandler.bind(this, object, index)}>\n              <button className={index === this.state.activeIndex ? 'amp-icon amp-list-item-selected':'amp-icon'}></button>\n              <span>{object.label}</span>\n             </div>\n    }, this);\n    \n    return <div>\n            <div className=\"amp-list-item amp-list-title\" onClick={this.props.viewChange.bind(this, \"options\")}>\n              <button className=\"amp-icon amp-icon-left\"></button>\n              <span>Character Edge Style</span>\n            </div>\n            {OptionsList}\n           </div>\n  }\n}\n","import Panel from \"../Panel.js\"\n\nexport default class FontColor extends Panel {\n  \n  constructor(props) {\n    super(props)\n    this.listOptions = [{label:\"White\", value: \"rgb(255, 255, 255)\"},\n                         {label:\"Yellow\", value: \"rgb(255, 255, 0)\"},\n                         {label:\"Green\", value: \"rgb(0, 128, 0)\"},\n                         {label:\"Cyan\", value: \"rgb(0, 255, 255)\"},\n                         {label:\"Blue\", value: \"rgb(0, 0, 255)\"},\n                         {label:\"Magenta\", value: \"rgb(255, 0, 255)\"},\n                         {label:\"Red\", value: \"rgb(255, 0, 0)\"},\n                         {label:\"Black\", value: \"rgb(0, 0, 0)\"}\n                        ]\n    this.listOptions.map(function(object, index){ \n      if(object.label === props.captionsettings['fontColorLabel']) {\n        this.state.activeIndex = index\n      }\n    },this)    \n\n  }\n  \n  clickHandler (object, index) {\n    this.setState({activeIndex: index})\n    this.props.settingsChange({\"fontColor\": { \"label\":object.label , \"value\":object.value}})\n  }\n  \n  render() {\n    var OptionsList = this.listOptions.map(function(object,index){\n\n      return <div key={index}  className=\"amp-list-item\" onClick={this.clickHandler.bind(this, object, index)}>\n              <button className={index === this.state.activeIndex ? 'amp-icon amp-list-item-selected':'amp-icon'}></button>\n              <span>{object.label}</span>\n             </div>\n    }, this);\n    \n    return <div>\n            <div className=\"amp-list-item amp-list-title\" onClick={this.props.viewChange.bind(this, \"options\")}>\n              <button className=\"amp-icon amp-icon-left\"></button>\n              <span>Font Color</span>\n            </div>\n            {OptionsList}\n           </div>\n  }\n}\n","import Panel from \"../Panel.js\"\n\nexport default class FontFamily extends Panel {\n  \n  constructor(props) {\n    super(props)\n    this.listOptions = [{label:\"Monospaced Serif\", value: \"'Courier New', Courier, 'Nimbus Mono L', 'Cutive Mono', monospace\"},\n                         {label:\"Proportional Serif\", value: \"'Times New Roman', Times, Georgia, Cambria, 'PT Serif Caption', serif\"},\n                         {label:\"Monospaced Sans-Serif\", value: \"'Deja Vu Sans Mono', 'Lucida Console', Monaco, Consolas, 'PT Mono', monospace\"},\n                         {label:\"Proportional Sans-Serif\", value: \"Roboto, 'Arial Unicode Ms', Arial, Helvetica, Verdana, 'PT Sans Caption', sans-serif\"},\n                         {label:\"Casual\", value: \"'Comic Sans MS', Impact, Handlee, fantasy\"},\n                         {label:\"Cursive\", value: \"'Monotype Corsiva', 'URW Chancery L', 'Apple Chancery', 'Dancing Script', cursive\"},\n                         {label:\"Small Capitals\", value: \"'Arial Unicode Ms', Arial, Helvetica, Verdana, 'Marcellus SC', sans-serif; font-variant: small-caps\"}\n                        ];\n    this.listOptions.map(function(object, index){ \n      if(object.label === props.captionsettings['fontFamily']) {\n        this.state.activeIndex = index\n      }\n    },this)    \n\n  }\n  \n  clickHandler (object, index) {\n    this.setState({activeIndex: index})\n    this.props.settingsChange({\"fontFamily\": { \"label\":object.label , \"value\":object.value}})\n  }\n  \n  render() {\n    \n    var OptionsList = this.listOptions.map(function(object, index){\n\n      return <div key={index} className=\"amp-list-item\" onClick={this.clickHandler.bind(this, object, index)}>\n              <button className={index === this.state.activeIndex ? 'amp-icon amp-list-item-selected':'amp-icon'}></button>\n              <span>{object.label}</span>\n             </div>\n    }, this);\n    \n    return <div>\n            <div className=\"amp-list-item amp-list-title\" onClick={this.props.viewChange.bind(this, \"options\")}>\n              <button className=\"amp-icon amp-icon-left\"></button>\n              <span>Font Family</span>\n            </div>\n            {OptionsList}\n           </div>\n    \n    \n  }\n}\n","import Panel from \"../Panel.js\"\n\nexport default class FontOpacity extends Panel {\n  \n  constructor(props) {\n    super(props)\n    this.listOptions = [\n                         {label:\"25%\", value: \".25\"},\n                         {label:\"50%\", value: \".5\"},\n                         {label:\"75%\", value: \".75\"},\n                         {label:\"100%\", value: \"1\"}\n                        ]\n                        \n    this.listOptions.map(function(object, index){ \n      if(object.label === props.captionsettings['fontOpacityLabel']) {\n        this.state.activeIndex = index\n      }\n    },this)    \n\n  }\n  \n  clickHandler (object, index) {\n    this.setState({activeIndex: index})\n    this.props.settingsChange({\"fontOpacity\": { \"label\":object.label , \"value\":object.value}})\n  }\n  \n  render() {\n    \n    var OptionsList = this.listOptions.map(function(object, index){\n      return <div key={index} className=\"amp-list-item\" onClick={this.clickHandler.bind(this, object, index)}>\n              <button className={index === this.state.activeIndex ? 'amp-icon amp-list-item-selected':'amp-icon'}></button>\n              <span>{object.label}</span>\n             </div>\n    }, this);\n    \n    return <div>\n            <div className=\"amp-list-item amp-list-title\" onClick={this.props.viewChange.bind(this, \"options\")}>\n              <button className=\"amp-icon amp-icon-left\"></button>\n              <span>Font Opacity</span>\n            </div>\n            {OptionsList}\n           </div>\n  }\n}\n","import Panel from \"../Panel.js\"\n\nexport default class FontSize extends Panel {\n  \n  constructor(props) {\n    super(props)\n    this.listOptions = [\n                         {label:\"70%\", value: \"Extra small\"},\n                         {label:\"100%\", value: \"Small\"},\n                         {label:\"150%\", value: \"Medium\"},\n                         {label:\"200%\", value: \"Large\"},\n                         {label:\"300%\", value: \"Extra large\"}\n                       ]\n                       \n    this.listOptions.map(function(object, index){ \n     if(object.label === props.captionsettings['fontSizeLabel']) {\n       this.state.activeIndex = index\n     }\n    },this)    \n\n  }\n  \n  clickHandler (object, index) {\n    this.setState({activeIndex: index})\n    this.props.settingsChange({\"fontSize\": { \"label\":object.label , \"value\":object.value}})\n  }\n  \n  render() {\n    \n    var OptionsList = this.listOptions.map(function(object, index){\n\n      return <div key={index} className=\"amp-list-item\" onClick={this.clickHandler.bind(this, object, index)}>\n              <button className={index === this.state.activeIndex ? 'amp-icon amp-list-item-selected':'amp-icon'}></button>\n              <span>{object.label}</span>\n             </div>\n    }, this);\n    \n    return <div>\n            <div className=\"amp-list-item amp-list-title\" onClick={this.props.viewChange.bind(this, \"options\")}>\n              <button className=\"amp-icon amp-icon-left\"></button>\n              <span>Font Size</span>\n            </div>\n            {OptionsList}\n           </div>\n  }\n}\n","import Panel from \"../Panel.js\"\n\nexport default class WindowColor extends Panel {\n  \n  constructor(props) {\n    super(props)\n    this.listOptions = [{label:\"White\", value: \"rgb(255, 255, 255)\"},\n                         {label:\"Yellow\", value: \"rgb(255, 255, 0)\"},\n                         {label:\"Green\", value: \"rgb(0, 128, 0)\"},\n                         {label:\"Cyan\", value: \"rgb(0, 255, 255)\"},\n                         {label:\"Blue\", value: \"rgb(0, 0, 255)\"},\n                         {label:\"Magenta\", value: \"rgb(255, 0, 255)\"},\n                         {label:\"Red\", value: \"rgb(255, 0, 0)\"},\n                         {label:\"Black\", value: \"rgb(0, 0, 0)\"}\n                        ]\n                        \n    this.listOptions.map(function(object, index){ \n      if(object.label === props.captionsettings['windowColorLabel']) {\n        this.state.activeIndex = index\n      }\n    },this)    \n\n  }\n  \n  clickHandler (object, index) {\n    this.setState({activeIndex: index})\n    this.props.settingsChange({\"windowColor\": { \"label\":object.label , \"value\":object.value}})\n  }\n  \n  render() {\n    \n    var OptionsList = this.listOptions.map(function(object, index){\n\n      return <div key={index} className=\"amp-list-item\" onClick={this.clickHandler.bind(this, object, index)}>\n              <button className={index === this.state.activeIndex ? 'amp-icon amp-list-item-selected':'amp-icon'}></button>\n              <span>{object.label}</span>\n             </div>\n    }, this);\n    \n    return <div>\n            <div className=\"amp-list-item amp-list-title\" onClick={this.props.viewChange.bind(this, \"options\")}>\n              <button className=\"amp-icon amp-icon-left\"></button>\n              <span>Window Color</span>\n            </div>\n            {OptionsList}\n           </div>\n  }\n}\n","import Panel from \"../Panel.js\"\n\nexport default class WindowOpacity extends Panel {\n  \n  constructor(props) {\n    super(props)\n    this.listOptions = [{label:\"0%\", value: \"0\"},\n                         {label:\"25%\", value: \".25\"},\n                         {label:\"50%\", value: \".5\"},\n                         {label:\"75%\", value: \".75\"},\n                         {label:\"100%\", value: \"1\"}\n                        ]\n                      \n    this.listOptions.map(function(object, index){ \n      if(object.label === props.captionsettings['windowOpacityLabel']) {\n        this.state.activeIndex = index\n      }\n    },this)    \n\n  }\n  \n  clickHandler (object, index) {\n    this.setState({activeIndex: index})\n    this.props.settingsChange({\"windowOpacity\": { \"label\":object.label , \"value\":object.value}})\n  }\n  \n  render() {\n    \n    var OptionsList = this.listOptions.map(function(object, index){\n\n      return <div key={index} className=\"amp-list-item\" onClick={this.clickHandler.bind(this, object, index)}>\n              <button className={index === this.state.activeIndex ? 'amp-icon amp-list-item-selected':'amp-icon'}></button>\n              <span>{object.label}</span>\n             </div>\n    }, this);\n    \n    return <div>\n            <div className=\"amp-list-item amp-list-title\" onClick={this.props.viewChange.bind(this, \"options\")}>\n              <button className=\"amp-icon amp-icon-left\"></button>\n              <span>Window Opacity</span>\n            </div>\n            {OptionsList}\n           </div>\n  }\n}\n","import Panel from \"../Panel.js\"\n\nexport default class ScrollType extends Panel {\n  \n  constructor(props) {\n    super(props)\n    this.listOptions = [{label:\"Pop-out\", value: \"pop-out\"},\n                         {label:\"Roll-on\", value: \"roll-on\"},\n                         {label:\"Paint-on\", value: \"paint-on\"}\n                        ]\n                        \n    this.listOptions.map(function(object, index){ \n      if(object.label === props.captionsettings['scroll']) {\n        this.state.activeIndex = index\n      }\n    },this)    \n\n  }\n  \n  clickHandler (object, index) {\n    this.setState({activeIndex: index})\n    this.props.settingsChange({\"scroll\": { \"label\":object.label , \"value\":object.value}})\n  }\n  \n  render() {\n    \n    var OptionsList = this.listOptions.map(function(object, index){\n\n      return <div key={index} className=\"amp-list-item\" onClick={this.clickHandler.bind(this, object, index)}>\n              <button className={index === this.state.activeIndex ? 'amp-icon amp-list-item-selected':'amp-icon'}></button>\n              <span>{object.label}</span>\n             </div>\n    }, this);\n    \n    return <div>\n            <div className=\"amp-list-item amp-list-title\" onClick={this.props.viewChange.bind(this, \"options\")}>\n              <button className=\"amp-icon amp-icon-left\"></button>\n              <span>Font Size</span>\n            </div>\n            {OptionsList}\n           </div>\n  }\n}\n","import Panel from \"./Panel.js\"\nimport Home from \"./captionsettings/Home\"\nimport Options from \"./captionsettings/Options\"\nimport BackgroundColor from \"./captionsettings/BackgroundColor\"\nimport BackgroundOpacity from \"./captionsettings/BackgroundOpacity\"\nimport CharacterEdgeStyle from \"./captionsettings/CharacterEdgeStyle\"\nimport FontColor from \"./captionsettings/FontColor\"\nimport FontFamily from \"./captionsettings/FontFamily\"\nimport FontOpacity from \"./captionsettings/FontOpacity\"\nimport FontSize from \"./captionsettings/FontSize\"\nimport WindowColor from \"./captionsettings/WindowColor\"\nimport WindowOpacity from \"./captionsettings/WindowOpacity\"\nimport ScrollType from \"./captionsettings/ScrollType\"\n\nexport default class CaptionSettings extends Panel {\n  \n  constructor(props) {\n    super(props)\n    this.state.languages = []\n    this.state.languageSelected = null\n    this.state.captionsettings = {\n      \"edgeType\": \"None\",\n      \"fontFamily\": \"Monospaced Serif\",\n      \"fontSize\": \"Small\",\n      \"fontSizeLabel\": \"100%\",\n      \"scroll\": \"Pop-out\",\n      \"backgroundColor\": \"rgba(255, 255, 255, 1)\",\n      \"fontColor\": \"rgba(0, 0, 0, 1)\",\n      \"windowColor\": \"rgba(255, 255, 255, 1)\",\n      \"edgeColor\": \"rgba(128,128,128, 0.7)\",\n      \"fontColorLabel\": \"Black\",\n      \"windowColorLabel\": \"White\",\n      \"backgroundColorLabel\": \"White\",\n      \"windowOpacityLabel\": \"100%\",\n      \"fontOpacityLabel\": \"100%\",\n      \"backgroundOpacityLabel\": \"100%\",\n      \"languageLabel\": \"off\",\n      \"visible\": null\n    }\n    this.state.viewChange = this.changeView.bind(this)\n    this.state.settingsChange = this.changeSettings.bind(this)\n    this.state.level = \"home\";\n    this.player.captioning.addEventListener(\"tracksloaded\", this.tracksloaded.bind(this))\n    this.player.captioning.addEventListener(\"trackselected\", this.trackselected.bind(this))\n  }\n  \n  componentWillMount() {\n    this.props.captionTracks && this.tracksloaded()\n    this.open = true\n   }\n\n  set showing(value) {\n    this.state.captionsettings.visible = value\n    this.player.captioning.setHidden(!value)\n  }\n  \n  get showing() {\n    return this.player.captioning.getHidden()\n  }\n  \n  tracksloaded(data) {\n    const languages = []\n    const tracks = data? data.detail : this.props.captionTracks\n    const len = tracks.length\n    let track = null\n    \n    for (let i = 0; i < len; i++) {\n      track = tracks[i]\n      if (track.kind != \"captions\")\n        continue\n      languages.push(track.language || \"Unknown CC\")\n    }\n    this.setState({languages})\n  }\n  \n  trackselected(event) {\n    this.state.languageSelected = event.detail.language\n  }\n  selectLanguage(lang) {\n    this.showing = true\n    this.player.captioning.selectTrackByLanguage(lang)\n  }\n  \n  setCaptionSettings() {\n    let settingObject = Object.assign({},this.state.captionsettings);\n    for (var key in settingObject) {\n      if (key.endsWith('Label')) {\n        delete settingObject[key]\n      }\n    }\n    settingObject.visible = !this.showing\n    this.player.captioning.changeSettings(settingObject);\n    console.log(\"settingObject\",settingObject)\n  }\n  \n  changeView (toState) {\n    setTimeout(() => { this.setState({level:toState}) }, 100);\n  }\n  \n  \n  changeSettings(toLevel){\n    if (typeof(toLevel) === \"object\") {\n      let object = toLevel\n      for (var key in object) {\n        if (object.hasOwnProperty(key)) {\n          let value = object[key]\n          switch (key) {\n            case \"showing\": \n              this.showing = false\n              break;\n            case \"language\": \n              this.state.lang = value\n              this.state.captionsettings.languageLabel = value\n              this.selectLanguage(value)\n              break;\n            case \"fontSize\":\n              this.state.captionsettings[key] = value['value']\n              this.state.captionsettings[key+'Label'] = value['label']\n              break;\n            case \"edgeType\":\n            case \"fontFamily\":\n            case \"scroll\":\n              this.state.captionsettings[key] = value['label']\n              break;\n            case \"backgroundColor\":\n            case \"fontColor\":\n            case \"windowColor\":\n              let matchColors = /rgba\\((\\d{1,3}), (\\d{1,3}), (\\d{1,3}), ((\\d{0,1}.\\d{1,2})|(\\d{1}))?\\)/\n              let opacity = matchColors.exec(this.state.captionsettings[key])[4]\n              if (typeof(value) === \"object\") {\n                this.state.captionsettings[key+\"Label\"] = value.label \n                value = value.value\n              }\n              this.state.captionsettings[key] = value.replace(\")\", \", \"+opacity+\")\").replace(\"rgb\", \"rgba\")\n              break;\n            case \"backgroundOpacity\":\n            case \"fontOpacity\":\n            case \"windowOpacity\":\n              if (typeof(value) === \"object\") {\n                this.state.captionsettings[key+\"Label\"] = value.label \n                value = value.value\n              }\n              key = key.replace(\"Opacity\", \"Color\")\n              matchColors = /rgba\\((\\d{1,3}), (\\d{1,3}), (\\d{1,3}), ((\\d{0,1}.\\d{1,2})|(\\d{1}))?\\)/\n              let rgba = matchColors.exec(this.state.captionsettings[key])\n              this.state.captionsettings[key] = \"rgba(\"+rgba[1]+\", \"+rgba[2]+\", \"+rgba[3]+\", \"+value+\")\"\n              break;\n            \n            default:\n              \n          }\n          this.setCaptionSettings()\n        }\n      }\n      \n      return;\n    }\n  }\n  \n  getCurrentPage() {\n    \n    switch (this.state.level) {\n      case \"home\":\n        return <Home languages={this.state.languages} player={this.player} {...this.state} gotoSettings={this.props.gotoSettings.bind(this)}/>;\n        break;\n      case \"options\":\n        return <Options {...this.state}/>;\n        break;\n      case \"fontFamily\":\n        return <FontFamily {...this.state}/>;\n        break; \n      case \"fontColor\":\n        return <FontColor {...this.state}/>;\n        break;\n      case \"fontSize\":\n        return <FontSize {...this.state}/>;\n        break;\n      case \"fontOpacity\":\n        return <FontOpacity {...this.state}/>;\n        break;\n      case \"backgroundColor\":\n        return <BackgroundColor {...this.state}/>;\n        break;\n      case \"backgroundOpacity\":\n        return <BackgroundOpacity {...this.state}/>;\n        break; \n      case \"windowColor\":\n        return <WindowColor {...this.state}/>;\n        break;\n      case \"windowOpacity\":\n        return <WindowOpacity {...this.state}/>;\n        break;\n      case \"edgeType\":\n        return <CharacterEdgeStyle {...this.state}/>;\n        break;\n      case \"scroll\":\n        return <ScrollType {...this.state}/>;\n        \n    }\n  }\n  \n  render() {\n    const localization = this.player.localization\n    return <div ref=\"element\">{this.getCurrentPage()}</div>\n  }\n}","import Panel from \"./Panel.js\"\nimport CaptionSettings from \"./CaptionSettings.js\"\nimport Bitrate from \"./Bitrate.js\"\n\nexport default class Settings extends Panel {\n  \n  constructor(props) {\n    super(props)\n    this.state = {\n      settingsLevel: 0,\n      bitrateLabel: \"Auto\"\n    }\n    this.player.captioning.addEventListener(\"trackselected\", this.trackselected.bind(this))\n    this.player.captioning.addEventListener(\"tracksloaded\", this.tracksloaded.bind(this))\n    this.player.addEventListener(\"bitratechanging\", this.bitrateChange.bind(this))\n    this.player.addEventListener(\"bitratelevelsloaded\", this.bitratesLoaded.bind(this))\n  }\n  \n  \n  trackselected(track)\n  {\n    let lang = this.props.player.localization.getLanguageString(track.detail.language) || track.detail.language || \"None\"\n    this.setState({language: lang})\n  }\n  \n  tracksloaded(data)\n  {\n    this.state.captioningTracks = data.detail\n  }\n  \n  bitratesLoaded(event)\n  {\n    this.state.bitrateArray = event.data.levels\n  }\n  \n  bitrateChange(event)\n  {\n    let brLabel = event.detail.bitrate ? (event.detail.bitrate/1000 + \"Kbps\") : \"Auto\"\n    this.state.bitrateIndex = this.state.bitrateArray? this.state.bitrateArray.indexOf(event.detail) : -1\n    this.setState({bitrateLabel: brLabel})\n  }\n  \n  changeState(value) {\n    setTimeout(() => { this.setState({settingsLevel:value});}, 100)\n  }\n  \n  render() {\n    switch (this.state.settingsLevel) {\n      case 0:\n      return (<div ref=\"element\" {...this.propsList} className={`amp-settings amp-panel ${this.className}`}>\n              <div className='amp-list-item' onClick={this.changeState.bind(this, 1)}>\n                <span className=\"amp-label\">Subtitles</span>\n                <button className=\"amp-icon amp-icon-right amp-right\"></button>\n                <span className=\"amp-right\">{this.state.language}</span>\n              </div>\n              <div className='amp-list-item' onClick={this.changeState.bind(this, 2)}>\n                <span className=\"amp-label\">Bitrate</span>\n                <button className=\"amp-icon amp-icon-right amp-right\"></button>\n                <span className=\"amp-right\">{this.state.bitrateLabel}</span>\n              </div>\n             </div>)\n        break\n      case 1:\n        return (<div ref=\"element\" className={`amp-captioning-settings amp-panel ${this.className}`}>\n                  <CaptionSettings captionTracks={this.state.captioningTracks}  player={this.player} gotoSettings={this.changeState.bind(this,0)}/>\n                </div>)\n        break\n      case 2:\n        return (<div ref=\"element\" className={`amp-bitrate amp-panel ${this.className}`}>\n                  <Bitrate bitrate={this.state} player={this.player} gotoSettings={this.changeState.bind(this,0)} />\n                </div>)\n        break  \n    }\n    \n  }\n} ","import Panel from \"./Panel.js\"\n\nexport default class Share extends Panel {\n  \n  constructor(props) {\n    super(props)\n    this.listOptions = [\n                         {label:\"Facebook\", icon: \"amp-fb\", url:\"www.facebook.html\"},\n                         {label:\"Twitter\", icon: \"amp-tw\", url:\"\"}\n                       ]\n  }\n  \n  \n  clickHandler(object, index) {\n    if(confirm(\"Would you like to share on:\"+object.label) == true){\n      alert(\"You clicked to share\")\n    }\n    else {\n      alert(\"You did not share\")\n    }\n  }\n  \n  \n  render() {\n    \n    var OptionsList = this.listOptions.map(function(object,index){\n\n      return <div key={index}  className=\"amp-list-item\" onClick={this.clickHandler.bind(this, object, index)}>\n              <button className={`amp-icon ${object.icon}`} ></button>\n              <span>{object.label}</span>\n             </div>\n    }, this);\n    \n    \n    return <div ref=\"element\" className={`amp-share amp-panel ${this.className}`}>\n            {OptionsList}\n           </div>\n  }\n} ","import AMPControl from \"./AMPControl.js\"\n\nexport default class CaptionToggleButton extends AMPControl {\n  \n  constructor(props) {\n    super(props)\n  }\n  \n  onClick(event) {\n    this.player.captioning.setHidden(!this.player.captioning.getHidden())\n  }\n} ","import AMPComponent from \"./AMPComponent.js\"\nimport AMPContainer from \"./AMPContainer.js\"\nimport AMPPanelControl from \"./AMPPanelControl.js\"\nimport PlayPause from \"./PlayPause.js\"\nimport PauseOverlay from \"./PauseOverlay.js\"\nimport Rewind from \"./Rewind.js\"\nimport CurrentTime from \"./CurrentTime.js\"\nimport Duration from \"./Duration.js\"\nimport Progress from \"./Progress.js\"\nimport Volume from \"./Volume.js\"\nimport Mute from \"./Mute.js\"\nimport Fullscreen from \"./Fullscreen.js\"\nimport Panel from \"./Panel.js\"\nimport PlaybackRate from \"./PlaybackRate.js\"\nimport Bitrate from \"./Bitrate.js\"\nimport Settings from \"./Settings.js\"\nimport CaptionSettings from \"./CaptionSettings.js\"\nimport Share from \"./Share.js\"\nimport CaptionToggleButton from \"./CaptionToggleButton.js\"\n\nexport default class UI extends AMPComponent {\n  constructor(props) {\n    super(props)\n    this._playstate = \"ready\"\n    this._activeLoced = false\n    this.state.media = {}\n    this.timeout = null\n  }\n  \n  get container() {\n    return this.refs.container\n  }\n  \n  get components() {\n    return this.refs\n  }\n  \n  set playstate(value) {\n    if (this._playstate == value)\n      return\n      \n    const updates = {\n      [`amp-${this._playstate}`]: false,\n      [`amp-${value}`]: true\n    }\n    this._playstate = value\n    this.container.classList.update(updates)\n  }\n  \n  get playstate() {\n    return this._playstate\n  }\n  \n  set waiting(value) {\n    if (this._waiting == value)\n      return\n    this._waiting = value  \n    this.container.classList.update({\"amp-waiting\": this._waiting})\n  }\n  \n  onmediachange(event) {\n    const media = this.player.media\n    this.container.classList.update({\"amp-text-tracks\": media.tracks && media.tracks.length})\n    this.setState({media})\n  }\n\n  onplaystatechange(event) {\n    const state = event.detail.value\n    if (state == \"waiting\")\n      return\n    this.playstate = state\n  }\n  \n  onplaying() {\n    this.waiting = false\n  }\n  \n  onseeking() {\n    this.waiting = true\n  }\n  \n  onseeked() {\n    this.waiting = false\n  }\n  \n  onwaiting() {\n    this.waiting = true\n  }\n  \n  togglePlayPause() {\n    if (this.player.paused) {\n      this.player.play()\n    } else {\n      this.player.pause()\n    }\n  }\n  \n  mouseenter() {\n    clearTimeout(this.timeout)\n    this.container.classList.update({\"amp-active\": true, \"amp-inactive\": false})\n  }\n  \n  mouseleave() {\n    if (this.activeLocked == true || this.playstate == \"ready\" || this.playstate == \"paused\")\n      return\n      \n    this.container.classList.update({\"amp-active\": false, \"amp-inactive\": true})\n    this.timeout = setTimeout(() => {\n      this.container.classList.update({\"amp-inactive\": false})\n    }, this.config.autoHide * 1000)\n  }\n  \n  render() {\n    console.log(\"UI.render\")\n    return (\n      <AMPContainer ref=\"container\" className=\"amp-ui\" classList={[\"amp-ready\", \"amp-active\"]} \n          onMouseEnter={() => this.mouseenter()} onMouseLeave={() => this.mouseleave()}\n          onFocus={(event)=>console.log(event.type, event)}\n          onBlur={(event)=>console.log(event.type, event)}>\n        <div className=\"amp-interactive\" onClick={() => this.togglePlayPause() } tabIndex=\"-1\" />\n        <img className=\"amp-poster\" src={this.state.media.poster} tabIndex=\"-1\" />\n        <PauseOverlay ref=\"pauseOverlay\" altText=\"MSG_PLAY\" player={this.player} />\n        <Progress ref=\"progress\" player={this.player} />\n        <AMPContainer ref=\"controls\" className=\"amp-controls\">\n          <PlayPause ref=\"playpause\" altText=\"MSG_PLAY\" player={this.player} />\n          <Rewind ref=\"rewind\" altText=\"MSG_REWIND\" player={this.player} />\n          <div ref=\"timeDisplay\" className=\"amp-time-display\">\n             <CurrentTime ref=\"currentTime\" player={this.player} />\n             <span ref=\"timeSeparator\" className=\"amp-time-separator\" />\n             <Duration ref=\"duration\" player={this.player} />\n          </div>\n          <Mute ref=\"mute\" altText=\"MSG_MUTE\" player={this.player} />\n          <Volume ref=\"volume\" altText=\"MSG_VOLUME\" player={this.player} />\n          <div ref=\"spacer1\" className=\"amp-spacer\" />\n          <div ref=\"spacer2\" className=\"amp-spacer\" />\n          <PlaybackRate ref=\"playbackrate\" altText=\"MSG_PLAYBACK_RATE\" player={this.player} />\n          <AMPPanelControl ref=\"share\" altText=\"MSG_SHARE\" className=\"amp-share\" player={this.player} panel={this.refs.sharePanel} />\n          <CaptionToggleButton ref=\"cc\" altText=\"MSG_CC\" className=\"amp-cc\" player={this.player}/>\n          <AMPPanelControl ref=\"settings\" altText=\"MSG_SETTINGS\" className=\"amp-settings\" player={this.player} panel={this.refs.settingsPanel} />\n          <Fullscreen ref=\"fullscreen\" altText=\"MSG_ENTER_FULLSCREEN\" player={this.player} />\n        </AMPContainer>\n        <Share ref=\"sharePanel\" player={this.player} />\n        <Settings ref=\"settingsPanel\" player={this.player} />\n      </AMPContainer>\n    )\n  }\n  \n  destroy() {\n    ReactDOM.unmountComponentAtNode(this._container)\n  }\n  \n  static createElement(player) {\n    const element = document.createElement(\"div\")\n    element.className = \"amp-react\"\n    const ready = () => {\n      player.getViewComponent().appendChild(element)\n      player.removeEventListener(\"ready\", ready)\n    }\n    player.addEventListener(\"ready\", ready)\n    return element\n  }\n  \n  static create(player, config) {\n    return new Promise((resolve, reject) => {\n      const element = UI.createElement(player)\n      resolve(\n        ReactDOM.render(<UI player={player} config={config} />, element)\n      )\n    })\n  }\n}"]}